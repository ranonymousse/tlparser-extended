[
  {
    "id": 1,
    "status": "OK",
    "text": "Reliability property(QoS): no sensor node measure should be lost - to guarantee that no measurement is lost, even in the worst case where all transmissions fail, a sensor node with buffer size 1KB and a message size 40 Bytes can buffer 24 times before being overloaded and lose messages.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(buffer<=bufferSize) and bufferSize==1024",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 2,
    "status": "OK",
    "text": "At any time, if the PCP receives a datagram whose timestamp is greater than the latest time-stamp value that PCP has sent, then PCP drops the datagram.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(not(f1 and f2) U y1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 3,
    "status": "OK",
    "text": "At any time, if the PCP receives a datagram whose timestamp is within the receive window, and then PCP can receive the datagram.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(not(f1 and f3) U y2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 4,
    "status": "OK",
    "text": "At any time, if the PCP receives a datagram whose timestamp is outside the receive window, and then PCP must drop the datagram.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(not(f1 and f4) U y1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 5,
    "status": "OK",
    "text": "when the user leaves the room, then the location of the phone shall eventually become the safe place",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "UserLeft --> F (location_phone ==  location_SAFE )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 6,
    "status": "OK",
    "text": "reachability of a run ρ is winning for player 1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Occ_p_intersection_F != empty_set",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 7,
    "status": "OK",
    "text": "it is always the case that eventually the car believes it is safe or that it is in the process of braking",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (B_car_safe  --> G (F( B_car_safe or B_car_braking )))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 8,
    "status": "OK",
    "text": "the switching power is defined by adding the power consumed by individual gates in the circuit",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(pwr_max >= gate_pwr_sum and gate_pwr_sum >= pwr_min)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 9,
    "status": "OK",
    "text": "minimum delay for each of the ith path",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(gatessum_i_del >= del_path_i_min) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 10,
    "status": "OK",
    "text": "maximum delay for each of the ith path",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(gatessum_i_del <= del_path_i_max)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 11,
    "status": "OK",
    "text": "The user should be able to request / activate Cruise Control only from Pedal Only – PO or Pedal Assist - PA",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (State==PC or State== Brake) --> not(X(State==CC)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 12,
    "status": "OK",
    "text": "The system should not transit directly from Cruise Control - CC to Brake directly",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (State==CC and event==br) --> not(X (State==Brake)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 13,
    "status": "OK",
    "text": "When brake is requested in CC the system returns to PA or PO",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (( State==CC and event== br)-->(X(State==PO or State==PA)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 14,
    "status": "OK",
    "text": "When system is in CC, PA or Pedal Charge - PC state, the Engine is running (EngRun is True)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "((State==CC or State==PA or State==PC) --> (EngRun==TRUE))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 15,
    "status": "OK",
    "text": "When system is in PO or Brake state, the EngRun is False",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (State==Brake or State== PO) --> (EngRun==FALSE))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 16,
    "status": "OK",
    "text": "authenticity and consistency properties of RAPP: Authentication of Tag to Reader in RAPP can be expressed that ResRunningRT must be true before IniCommitRT, whereas the converse authentication property corresponds to saying that IniRunningRT becomes true before ResCommitRT",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( (G(not(IniCommitRT))) or (not(IniCommitRT) U ResRunningRT))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 17,
    "status": "OK",
    "text": "Similarly, authentication of Reader to Tag can be defined following the same rules. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( (G(not(ResCommitRT))) or (not(ResCommitRT) U IniRunningRT))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 18,
    "status": "OK",
    "text": "Also, the key version of the two agents Reader and Tag always needs to be consistent.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(ConsistencyRT)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 19,
    "status": "OK",
    "text": "The passage of the data collector activates the sensor to perform the measurement of physiological or environmental signs",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Collector_Start --> F Sensor_Measure)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 20,
    "status": "OK",
    "text": "Once the sensor is activated, it must perform the measurement of a sign or parameter",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Sensor_Activation --> F Patient_Measure)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 21,
    "status": "OK",
    "text": "The data collector must collect information before transferring it to the data center",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Collector_Collection --> F Center_Transfer) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 22,
    "status": "OK",
    "text": "If the sensor is activated, then the measured data will be transmitted to the data collector",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(Sensor_Measure --> F Collector_Collect)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 23,
    "status": "OK",
    "text": "If the sensor is activated, then the measured data will be transmitted after a finite time to the data center",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(Sensor_Measure --> F Center_Transfer)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 24,
    "status": "OK",
    "text": "The doctor cannot provide treatment unless the measured data were transferred to the data center",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(Doctor_Treatment --> F Center_Transfer)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 25,
    "status": "OK",
    "text": "The patient can receive treatment only if the doctor has consulted the data center",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (notDoctor_Treatment --> F Patient_Treated)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 26,
    "status": "OK",
    "text": "Sensors should be already alerted before measuring a physiological or environmental sign",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Term_State --> Channels_Empty",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 27,
    "status": "OK",
    "text": "The measured data should be already transferred to the data center before the doctors make a decision",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Sensor_Measure --> (Sensor_Alert == Alerted) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 28,
    "status": "OK",
    "text": "The measured data should be already collected before the data’s eventual transfer to the data center",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Patient_Measure --> (Patient_Alert == Alerted)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 29,
    "status": "OK",
    "text": "At the end of the system execution, the communication channels should be empty",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Doctor_Decision --> (Data_Rec == Recorded)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 30,
    "status": "OK",
    "text": "Data transmitted from the cockpit is received by the sensor",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(Sensor_DataLayer_input --> F(Cockpit_DataLayer_output and (Cockpit_DataLayer_output == Sensor_DataLayer_input)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 31,
    "status": "OK",
    "text": "Maintain[All fire doors closed]",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (fd_isClosed)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 32,
    "status": "OK",
    "text": "kitchen CO2 level cannot exceed 1000 ppm, globally",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(kitchen_CO2 <= 1000)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 33,
    "status": "OK",
    "text": "if no one is in the living room, then heater should always be off",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(livingroom_occupancy == false and livingroom_heater == off)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 34,
    "status": "OK",
    "text": "fire forces the closure of passage p115",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(not p115)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 35,
    "status": "OK",
    "text": "An action a is enabled if both its functional guard ga and its security guard ha hold and all its synchronisation agents are ready",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "g_a and h_a and  ready_p",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 36,
    "status": "OK",
    "text": "concurrent execution of CASAS - the execution of an action system starts with an initialisation step, and repeatedly all the enabled actions are executed in parallel.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "X (initial and stab and progress and compete and conc and actFair and agtFair)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 37,
    "status": "OK",
    "text": "The control loop continues infinitely and the value of the sender side in not changed until the value of receiver side is changed = (A_control_active_B = Controlling) is established at some point, (B_control_passive_A= Controlled) is established is established at some point after that point, (B_transmit_data_active_A= Transmitting_Data) is established at some point after that point, and (A_transmit_data_passive_B = Transmitted_Data) is established at some point after that point and all that is established infinitely often. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F ( (A_control_active_B == Controlling) and F ( ((A_control_active_B == Controlling) U (B_control_passive_A== Controlled)) and (F  ((B_control_passive_A== Controlled) U (B_transmit_data_active_A== Transmitting_Data)) and F( A_transmit_data_passive_B == Transmitted_Data)))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 38,
    "status": "OK",
    "text": "The system will be stopped by improper fairness of data transfer execution= (mc1_control_active_camera= Controlling) is established at some point, (camera_control_passive_mc1= Controlled) is established is established at some point after that point, (camera_transmit_data_active_mc1= Transmitting_Data) is established at some point after that point, and (mc1_transmit_data_passive_camera = Transmitted_Data) is established at some point after that point and all that i",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (  F ( mc1_control_active_camera == Controlling and F ( (mc1_control_active_camera == Controlling) U (camera_control_passive_mc1 == Controlled and F ( (camera_control_passive_mc1 == Controlled) U (camera_transmit_data_active_mc1 == Transmitting_Data and F ( (camera_transmit_data_active_mc1 == Transmitting_Data) U (mc1_transmit_data_passive_camera == Transmitted_Data and  F ((mc1_transmit_data_passive_camera == Transmitted_Data) U A_Transmit_data_passive_B == Transmitted_Data )))))))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 39,
    "status": "OK",
    "text": "Vendors must always maintain their production under the daily limit set by the SCSC",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (VSC_production <= SCSC_production_limit)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 40,
    "status": "OK",
    "text": "Vendors must always log their productions into the ledger",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (VSC_create_batch --> F (VSC_log))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 41,
    "status": "OK",
    "text": "Point-of-sales must always adhere to the price set by the SCSC",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (PoSSC_price == SCSC_fixed_price)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 42,
    "status": "OK",
    "text": "Once the point-of-sale receives the oil batches from a vendor, the payment must be triggered by the SCSC",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (PoSSC_create_batch --> F (SCSC_pay))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 43,
    "status": "OK",
    "text": "liveness specification or repeated reachability specification ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(F(B))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 44,
    "status": "OK",
    "text": "trajectory starting from an initial state s0 ∈ (0, 1), the probability of staying inside [0, 1) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(F(zero_closed_one_open))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 45,
    "status": "OK",
    "text": "an infinite trajectory getting trapped forever inside x ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(G(x))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 46,
    "status": "OK",
    "text": "the abstract reachability specification to the interval [1, 2]",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F one_closed_two_closed",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 47,
    "status": "OK",
    "text": "Always (forever) if the button is pressed, then next the gate opens",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (button_pressed --> X open_gate)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 48,
    "status": "OK",
    "text": "forever if button_pressed then finally turn_off_alarm",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (button_pressed --> F turn_off_alarm)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 49,
    "status": "OK",
    "text": "forever if car_parked then finally next close_gate and led_off",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (car_parked --> X (close_gate and led_off))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 50,
    "status": "OK",
    "text": "Always (forever) if somebody enters home, then finally the music is turned on and the air purifier is turned on",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (entered_home --> F (turn_on_music and turn_on_air_purifier))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 51,
    "status": "OK",
    "text": "Forever never should be possible that both signals for opening and closing the gate are active at the same time",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not(open_gate and close_gate)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 52,
    "status": "OK",
    "text": "forever if car_parked or entered_home then finally illuminate garden",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((car_parked or entered_home) --> F illuminate_garden)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 53,
    "status": "OK",
    "text": "it should never be the case during gate reconfiguration that the control system will be trying to open or close the gate. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not(reconfigure_gate and (open_gate or close_gate))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 54,
    "status": "OK",
    "text": "where unauthorized access to the house results in some immediate reactions, such as turning on the alarm siren or notifying a security agency",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((entered_home and notbutton_pressed) --> X (notify_security_agency and turn_on_alarm_siren and turn_on_alarm_lights and start_recording))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 55,
    "status": "OK",
    "text": "whenever the inhabitants leave their home, then finally the comfort maintaining subsystems will be turned off (sometimes not immediately, but after finishing the work cycle, e.g., of an air purifier) and the blinds will be closed",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (leaved_home --> F (turn_off_music and turn_off_TV and turn_off_air_purifier and close_blinds))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 56,
    "status": "OK",
    "text": "shows the initialization of existing ANN and PSO parameters when QoS factors are  normalized.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(G (normalizing_QoS and check) --> X (initialization and set)) --> (F ( (hidden_layers and Weights and Position and Velocity and maxnumber_iterations) --> generate_particle_population))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 57,
    "status": "OK",
    "text": "illustrates a critical condition for terminating ANN procedure when the iteration counter value is lower than the specified error value.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (training_ANN --> ( (check_MaxError and lower) --> (X (terminate_Training)) ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 58,
    "status": "OK",
    "text": "shows the reachability condition for achieving QoS checking factors between existing QoS metrics in terms of response time, availability, and price.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Availability == 1 and Price == 1 and ResponseTime == 1",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 59,
    "status": "OK",
    "text": "checks the reachability condition for applying the training procedure using the ANN algorithm. The LTL7 illustrates",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Training == 1 and Input_neurons == 1 and Activating_weights == 1 and Applying_layers == 1 and Output_layer == 1",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 60,
    "status": "OK",
    "text": "illustrates the reachability condition for checking the finalization of choosing the best solution for a service composition model.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Update_weights == 1  or  Return_Best_Solution == 1",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 61,
    "status": "OK",
    "text": "shows the reachability condition for the PSO procedure",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Calculate_PBest == 1 and Select_Best_Particle == 1 and Update_velocity == 1 and Update_GBest == 1",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 62,
    "status": "OK",
    "text": "Any path without containing such IIS path segment s",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(not(IISp))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 63,
    "status": "OK",
    "text": "vt is not reachable in the complete state space.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not( (G(not (IISp) )) and F (p) ) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 64,
    "status": "OK",
    "text": "Water-level monitor system automaton formula",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not((G(not(pv0 and X pv1 and X X pv5 ) and not(pv3 and X pv4 and X X pv5 ))) and F pv5 )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 65,
    "status": "OK",
    "text": "Retailer pays for the product subscription fee, Manufacturer provides the product and pays the freight, and Supplier send the product to Retailer. In addition, Retailer also hopes that after paying the product subscription fee, Manufacturer can send the invoice to him, and Supplier sends the shipment information to him for tracking before shipping.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "( (F (order_payment==received)) and (F (goods==received)) and (F (shipment_payment==received)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 66,
    "status": "OK",
    "text": "Retailer pays for the product subscription fee, Manufacturer provides the product and pays the freight, and Supplier send the product to Retailer. In addition, Retailer also hopes that after paying the product subscription fee, Manufacturer can send the invoice to him, and Supplier sends the shipment information to him for tracking before shipping.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "( (F(order_payment==received)) and (F(invoice==delivered)) and (F(goods==received)) and (F(shipment_payment==received)) and (F(shipment_information==delivered)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 67,
    "status": "OK",
    "text": "Retailer pays for the product subscription fee, Manufacturer provides the product and pays the freight, and Supplier send the product to Retailer. In addition, Retailer also hopes that after paying the product subscription fee, Manufacturer can send the invoice to him, and Supplier sends the shipment information to him for tracking before shipping.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F not (not order_payment==received and invoice==delivered))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 68,
    "status": "OK",
    "text": "Retailer pays for the product subscription fee, Manufacturer provides the product and pays the freight, and Supplier send the product to Retailer. In addition, Retailer also hopes that after paying the product subscription fee, Manufacturer can send the invoice to him, and Supplier sends the shipment information to him for tracking before shipping.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F not (not shipment_information==delivered and goods==received))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 69,
    "status": "OK",
    "text": "During UAS flight process, the time difference shall not exceed 100 time units (¬T imealarm) and the acceleration shall not exceed 13m/s2 (¬Accealarm).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((MODE == takeoff) and not Timealarm and not Accealarm)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 70,
    "status": "OK",
    "text": "During UAS flight process, when receiving a GPS data, the validation of Subframes (Subf rame) of received signals must be always correct",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((MODE == takeoff) and GPSrecv and Subframe)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 71,
    "status": "OK",
    "text": "During UAS flight process, the validation for arrival direction (Direction) and doppler shift (Doppler) of the received GPS signals must be always correct.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((MODE == takeoff) and GPSrecv and Direction and Doppler)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 72,
    "status": "OK",
    "text": "During UAS flight process, the time difference and acceleration shall always keep normal. And when receiving a GPS signal, its subframe data shall be correct, and the results of arrival direction and doppler shift shall keep correct",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((MODE == takeoff) and ((not Timealarm and not Accealarm) or (GPSrecv and Subframe and Direction and Doppler)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 73,
    "status": "OK",
    "text": "actuator planning",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not(takoff and land)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 74,
    "status": "OK",
    "text": "actuator planning",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((takoff and AUTO and not MonitorGPSattack) --> X auto)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 75,
    "status": "OK",
    "text": "actuator planning",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((takoff and MonitorGPSattack) --> X hover)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 76,
    "status": "OK",
    "text": "actuator planning",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((MonitorGPSattack) --> X GPSaccp)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 77,
    "status": "OK",
    "text": "monitor planning",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (Actuatortakeoff and ((Timealarm or Accealarm) or (GPSrecv and (not Subframe or not Direction or not Doppler)))) --> X GPSattack)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 78,
    "status": "OK",
    "text": "the goal of UAV is flying according to the action mode, and always satisfy the security properties. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(auto --> (s_p1 or s_p2 or s_p3 or s_p4) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 79,
    "status": "OK",
    "text": "the goal of UAV is flying according to the action mode, and always satisfy the security properties. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(land --> StartZone)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 80,
    "status": "OK",
    "text": "the goal of UAV is flying according to the action mode, and always satisfy the security properties. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F( (guide and e_p1) --> s_p1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 81,
    "status": "OK",
    "text": "the goal of UAV is flying according to the action mode, and always satisfy the security properties. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(hover --> STAY_THERE)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 82,
    "status": "OK",
    "text": "ServiceContract shown in Figure 2, two participants, consumer and the provider, send messages through their respective interface in a specific order.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (c_QuoteRequest and F (p_Quote and F (c_Order and F p_OrderConfirmation)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 83,
    "status": "OK",
    "text": "cloud application can properly respond to user requests, executing the appropriate actions and finally achieve the correct termination state.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(c_connect and F(p_ack and F(c_order1 and F(p_task1 and (c_specify and c_order1 and F(p_task2 and F(c_abort and p_done)))))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 84,
    "status": "OK",
    "text": "The [window] should always be closed when [weather] is raining",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(weather_raining -->  window_closed)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 85,
    "status": "OK",
    "text": "someone has a smart light bulb and wants the “red” color to always be followed by “green” or “yellow.” ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(color_red --> X(color_green or color_yellow))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 86,
    "status": "OK",
    "text": "the living room window should always be closed while it is raining",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not G (RAIN_on --> Win_closed)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 87,
    "status": "OK",
    "text": "the current state 2will last for 3 seconds, but the clock variable is reset last (t'p = 0)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(p==times_2_tp and p<=3)and(p_toned==times_3_tp and times_3_tp > times_3_t_toned_p and times_3_t_toned_p==0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 88,
    "status": "OK",
    "text": "First, the green light lasts 60 seconds (green state). There is a central (green, yellow) transition state after the green light is switched to the red light. This will last 3 seconds. Then, red light for 50 seconds is held (red state). After that, the red light will switch to green light, but also shifted to the middle (red, yellow) which lasts for 4 seconds. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "tp==0 and ( (G (p==1 and tp<=60) and (p_toned==2 and tp > sixty and t_toned_p==0)) or (G(p==2 and tp<=3) and (p_toned==3 and tp > three and t_toned_p==0) )or (G (p==3 and tp<=50 ) and (p_toned==4 and tp > fifty and t_toned_p==0)) or (G(p==4 and tp<=4) and (p_toned==1 and tp > four and t_toned_p==0)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 89,
    "status": "OK",
    "text": "First, the button object is in state 0. You just want to think the specific time mt1 you can switch between cities of buttons. As a result, the state of \"0 / 1\" is changed. This operation is designated by a toggle operation. Therefore, button on is a toggle delay variable corresponding to two delay transformations",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "mt1 < up_delay and ton ==0 and (G (on==0 and ton<=mt1 ) and (on_toned==1 and ton > mt1 and t_toned_on==0) and G(on==1 and ton<=mt1) and (on_toned==0 and ton > mt1 and t_toned_on==0))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 90,
    "status": "OK",
    "text": "the Toggle operation, on=0∧ton≤mt1 remains until on’=1∧ton>mt1∧t’on=0 or on=1 ∧ton≤mt1 remains until on’=0∧ton>mt1∧t’on=0.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "((on_toned==1 and ton > mt1 and t_toned_on==0) and (on==0 and ton<=mt1)) or ((on_toned==0 and ton > mt1 and t_toned_on==0) and (on==1 and ton<=mt1))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 91,
    "status": "OK",
    "text": "finitely many b actions (liveness specification)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(G(not b))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 92,
    "status": "OK",
    "text": "the temperature is infinitely often just right",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(F(JustRight))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 93,
    "status": "OK",
    "text": "the synthesized coordinator interacts with the heater and AC",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F switchACOn and G F switchHeatOn",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 94,
    "status": "OK",
    "text": "the Heater and AC are not switched on at the same time",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ((switchACOn) and (not switchACOff U switchHeatOn)) and not F ((switchHeatOn) and (not switchHeatOff U switchACOn))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 95,
    "status": "OK",
    "text": "finally p, where p is a predicate p ≡ end_state = = 1.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F p ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 96,
    "status": "OK",
    "text": "¬p holds (reached regular end state without a single check-in event) or finally q holds (maximum one check-out event before regular end state is reached).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not p or F q",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 97,
    "status": "OK",
    "text": "Globally, after input data metrics, the normalization phase is coming",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(input_metrics --> X normalization)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 98,
    "status": "OK",
    "text": "Globally, when the normalization phase and data refinement are checked, the next stage is the PSO phase.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( ( (normalization and refinement) --> (X pso) ) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 99,
    "status": "OK",
    "text": "Globally, when initial population is done and the data is checked, the V value is checked and computed for Pbest .",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( ((pop and send) --> check) ) --> (F( (comput_v and forward) --> (compute and calcu_pbest)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 100,
    "status": "OK",
    "text": "Globally, when Pbest is higher than max condition and Gbest is calculated, in the next state checking X value should not occur concurrently.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((pbest_max and yes) --> calc_Gbest) --> X not(check_x and no)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 101,
    "status": "OK",
    "text": "Globally, when the Pbest value is updated and the Gbest is higher than max condition, finally Gbest is selected. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(G(calcu_pbest and update) -->(gbest_max and yes)) U ((gbest_max and no) --> gbest_selec)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 102,
    "status": "OK",
    "text": "Globally, when the Gbest is selected, the next state is reducing population and generating the minimum metrics.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(gbest_selec) --> (X (((redu_pop and generate) --> min_metrics) --> start))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 103,
    "status": "OK",
    "text": "Globally, when the prediction phase is started, the data division is specified for training and testing operations",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((start --> (check and data_divi)) --> F((train and forward) --> (mlp_proc and selection)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 104,
    "status": "OK",
    "text": "Globally, the finalization state and update training are done, eventually if best quality is reachable then the test operation is started",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((finalization and update_train) --> F((best_Q and yes) --> (test and prediction)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 105,
    "status": "OK",
    "text": "Globally, the prediction using the MLP is calculated, the next state is finalized using train phase; after that, the final result is sent to checking data metrics.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(((prediction and ann_test) --> calculate) --> X ((pred_finalized and compute) --> (check and final_result)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 106,
    "status": "OK",
    "text": "Globally, the train operation using the MLP selection has not performed until the Gbest generate minimum metrics.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not ((train and mlp_proc) --> selection) U ((gbest_max and no) --> min_metrics)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 107,
    "status": "OK",
    "text": "The cart should stay within the limits specified by C1, always keep the pole upright in the range C2, and reach the region A.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Fa and G(c1 and c2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 108,
    "status": "OK",
    "text": "Platform verification property (C1) . Our model is safe w.r.t “transitive access” because the BC process successfully detects and denies the four conflicting execution sequences",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (p and q) --> r",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 109,
    "status": "OK",
    "text": "Safety Property for execution sequence 1 . (4.1.1. Execution sequence 1)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F p --> not q",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 110,
    "status": "OK",
    "text": "Safety Property of execution sequence 2 . (4.1.2. Execution sequence 2)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (p and q and r and t)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 111,
    "status": "OK",
    "text": "Safety Property of execution sequence 3 . (4.1.3. Execution sequence 3)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(p and q)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 112,
    "status": "OK",
    "text": "Safety Property of execution sequence 4 . (4.1.4. Execution sequence 4)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( (p --> q) and (not r) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 113,
    "status": "OK",
    "text": "the Observer0 finds at least two messages that have been consumed in the wrong order (Observer0 will monitor if there is an error in the order of data consumption at the Observable (Producer0))",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (Order0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 114,
    "status": "OK",
    "text": "Observer0 detects an error in the consumption of messages coming from Observable1 ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (Order_0_of_1) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 115,
    "status": "OK",
    "text": "Observer1 detects an error in the consumption of messages coming from Observable0",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (Order_1_of_0) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 116,
    "status": "OK",
    "text": "detects a multi-step attack. always that the Observable0 access to the market, and eventually the Observable0 download an app, the Observable1 gets a payload then eventually this payload start scanning the IoT ecosystem.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(  ((G (Access_market_D_0) --> (F App_download_D_0)) --> (F Payload_D_1)) --> (F Scanning_D_1)  )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 117,
    "status": "OK",
    "text": "assume-guarantee reasoning",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (assumption --> guarantee)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 118,
    "status": "OK",
    "text": "data transmitted from the sensor is received by the cockpit",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Sensor_DataLayer_input --> F (Cockpit_DataLayer_output  and (Cockpit_DataLayer_output == Sensor_DataLayer_input)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 119,
    "status": "OK",
    "text": "reachability property",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (y and (steps < k))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 120,
    "status": "OK",
    "text": "e-commerce scenario",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "s_a_p_plus_sv U s_a_eplus_e_pluse",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 121,
    "status": "OK",
    "text": "the air conditioner will be turned on if the in-house temperature exceeds the desired setpoint.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "above_C1_Config --> G F on_C2_Config",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 122,
    "status": "OK",
    "text": "When the gas concentration exceeds 10%, the alarm should be activated immediately until the gas concentration is below 8%",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (GAS_CONCENTRATION > ten ) --> X ( (ALARM_state == ON) U (GAS_CONCENTRATION < 8) ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 123,
    "status": "OK",
    "text": "there exists a state in which switching power exceeds the maximum bound, which can be true if any intrusion has a significant impact on the switching power. if the property is false then it indicates the scenario in which either there is no intrusion in the IC or the switching power fails to detect the HTs.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(SP != 0 --> (SPmax < SPsum))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 124,
    "status": "OK",
    "text": "If the Property I holds true, then we use Property II to generate the error trace for the switching power parameter",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(SP != 0 --> (SPmax >= SPsum))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 125,
    "status": "OK",
    "text": "true if HT has a significant impact on the propagation delay of the kth path of IC. The failure of this property illustrates that either there is no intrusion in IC or the propagation delay check fails to identify the HT gate(s). ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(D_k != 0 --> (D_k_max < Dsum_k))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 126,
    "status": "OK",
    "text": "performs the counterexample analysis, whenever Property III becomes true",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(D_k != 0 --> (D_k_max >= D_sum))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 127,
    "status": "OK",
    "text": "The increase in the leakage power consumption is identified if the Property V holds true.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (LPmax < LPsum)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 128,
    "status": "OK",
    "text": "identify a decrease in the leakage power below its minimum bound.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( Lpmin > Lpsum)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 129,
    "status": "OK",
    "text": "The counterexample driven analysis for the leakage power (5,6) is performed using the following two properties.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (LPmax >= LPsum)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 130,
    "status": "OK",
    "text": "The counterexample driven analysis for the leakage power (5,6) is performed using the following two properties.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (LPmin <= LPsum)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 131,
    "status": "OK",
    "text": "test the arithmetic addition of the 8-bit data buses A and B. The control bit selection status T and F corresponds to TRUE and FALSE, respectively",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (ctrl_0 == F and ctrl_1== F and ctrl_2 == F and ctrl_3 == F and ctrl_4 == F and ctrl_5 == F and ctrl_6 == F and ctrl_7 == F and ctrl_8 == T and ctrl_9 == T and ctrl_10 == F and  ctrl_11== F and ctrl_12 == T) --> (Z == A_plus_B))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 132,
    "status": "OK",
    "text": "The failure of this property shows that the maximum switching power is greater than or equal to the computed switching power of the IC.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (SP != 0 --> (SP_max < gsumSP))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 133,
    "status": "OK",
    "text": "if this property (10) is true, then we apply the following property to generate the counterexamples for analysis ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(SP != 0 -->  (SP_max >= gsumSP))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 134,
    "status": "OK",
    "text": "check the delay from control input ctrl[7] to output z[7] described as Net 169 and Net 375, respectively, in the netlist.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (D_1 != 0 --> (D_1_max < sum))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 135,
    "status": "OK",
    "text": "R1 = While the system is in operation, the pump must not be started more than twice.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G state == operation) and F (G state == system) and F (G state == pump) and F (G state == more) and F (G state == twice)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 136,
    "status": "OK",
    "text": "R2 = Lights are always on when each car is entered to the street.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G state == entered) and F (G state == car) and F (G state == street)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 137,
    "status": "OK",
    "text": "R3 = Air conditioner is turned off when Humidity is over 80.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G state == conditioner) and F (G state == 10)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 138,
    "status": "OK",
    "text": "R4 = The autonomous vehicle must not increase velocity nearby a crosswalk.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G state == vehicle) and F (G state == crosswalk)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 139,
    "status": "OK",
    "text": "safety constraint, that is, eventually reaching T",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (T_)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 140,
    "status": "OK",
    "text": "abstract behaviour of agent i, produces a Tell(i, j, P) within n time steps.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "X Bi_Tell_i_j_P",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 141,
    "status": "OK",
    "text": "agents, which are always guaranteed to reply to a request for information within n time steps. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (f2 --> X f3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 142,
    "status": "OK",
    "text": "if t is the time stamp when abstract agent i came to believe Ask( j, i, P) (i.e., Ask( j, i, P) appears in the agent i's working memory), then the atom Tell(i, j, P) must appear in the working memory of agent i within t + n steps. The atom Tell(i, j, P) is then copied to agent j's working memory at the next step.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( Bi_Ask_i_j_P --> X  Bi_Tell_i_j_P) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 143,
    "status": "OK",
    "text": "the Blood pressure and Heart rate sensor agents in the system generate information about the measurement values at different times in the interval [1, 5]. For example, the agent b i generates blood pressure information for a patient with patient's name Tracy and systolic blood pressure 130mmHg.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "X Bbi_Tell_bi_pci_hasSysBloodPressure_Tracy_130",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 144,
    "status": "OK",
    "text": "healthPC classifies the alarm level as ′MEDIUM in n time steps while message counter value of the healthPC is m, when the values of blood pressure and heart rate are 130mmHg, 85mmHg, and 30bps, respectively",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (B_pci_Tell_hi_pci_hasHeartRateFreq_Tracy30) and B_pci_Tell_bi_pci_hasSysBloodPressure_Tracy_130 and (B_pci_Tell_bi_pci_hasDiasBloodPressure_Tracy_85 --> X n_B_pci_hasAlarmLevel_Tracy_MEDIUM) and msg==mpc",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 145,
    "status": "OK",
    "text": "whenever patient's alarm level is classified (eg, in this case, it is Medium), the patient's home healthPC will interact and informs this to the planner p and the planner receives classified message in n time steps.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (B_pci_hasAlarmLevel_Tracy_MEDIUM --> X n_B_p_hasAlarmLevel_Tracy_MEDIUM)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 146,
    "status": "OK",
    "text": "whenever patient's alarm level is Medium and the agent p has received acknowledgements from the doctor and nurse as busy, then the agent p communicates with the emergency operator and the emergency operator e receives the message in n time steps.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (B_p_hasAlarmLevel_Tracy_MEDIUM and B_p_Tell_di_p_hasCareStatus_John_Busy and (B_p_Tell_ni_p_hasCareStatus_Fiona_Busy --> X n_Be_hasAlarmLevel_Tracy_MEDIUM))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 147,
    "status": "OK",
    "text": "burst sequence of unspecified length (denoted by the value INCR)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (HLOCK and (HBURST == INCR)) --> (X (F ( not REQVLD))) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 148,
    "status": "OK",
    "text": "when all Cloud VMs are overloaded (𝜑2) or when a VM is overloaded (𝜑1) and no VM is unused (¬𝜑3), it implies (→) that the system will eventually (◊) end up by reaching a state where all VMs are not overloaded (¬𝜑2) and this pattern is always true (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f2  or  (f1  and  not f3)) -->  F  not f2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 149,
    "status": "OK",
    "text": "when all Cloud services are overloaded (𝜑7) or a service is overloaded (𝜑6) and no service is unused (¬𝜑8), it implies (→) that the system will eventually (◊) end up by reaching a state where all services are not overloaded (¬𝜑7) and this pattern is always true (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f7  or  (f6  and  not f8)) -->  F  not f7)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 150,
    "status": "OK",
    "text": " when a Cloud VM is unused (𝜑3) or is underused (𝜑4) and no VM is overloaded (¬𝜑1), it implies (→) that the system will eventually (◊) end up by reaching a state where no VM is unused (¬𝜑3) and this pattern repeats indefinitely (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f3  or  f4)  and   not f1) -->  F  not f3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 151,
    "status": "OK",
    "text": " when a Cloud service is unused (𝜑8) and no Cloud service is overloaded (¬𝜑6), it implies (→) that the system will eventually (◊) reach a state where no Cloud service is unused (¬𝜑8) and this pattern repeats indefinitely (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f8  and   not f6) -->  F  not f8)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 152,
    "status": "OK",
    "text": "when all Cloud VMs are overloaded (𝜑2) or when a VM is overloaded (𝜑1) and no VM is unused or underused (¬(𝜑3 ∨ 𝜑4)), it implies (→) that the system will eventually (◊) reach a state where no VM is overloaded (¬𝜑1) and this pattern repeats indefinitely (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f2  or  (f1  and  not (f3  or  f4))) -->  F  (not f1) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 153,
    "status": "OK",
    "text": " when a VM is underused (𝜑4) and no VM is overloaded (¬𝜑1), it implies (→) that the system will eventually (◊) reach a state where no VM is underused (¬𝜑4) and this pattern repeats indefinitely (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f4  and   not f1) -->   F  not f4)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 154,
    "status": "OK",
    "text": " when a service is overloaded (𝜑6) and another service is unused (𝜑8), it implies that the next (◯) expected state is when requests redirecting across Cloud services is applied (𝜑9), until (U ) no service instance is overloaded (¬𝜑6) and this pattern is always true (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f6  and  f8) -->  X f9) U (not f6))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 155,
    "status": "OK",
    "text": " when a VM is overloaded (𝜑1) and another VM is unused or underused (𝜑3 ∨ 𝜑4), it implies that the next (◯) expected state is when services migration across Cloud VMs is applied (𝜑5), until (U ) no VM instance is overloaded (¬𝜑1) and this pattern is always true (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( ((f1  and (f3  or  f4)) -->  X f5) U (not f1))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 156,
    "status": "OK",
    "text": "when all Fog nodes are overloaded (𝜑11) or when a Fog node is overloaded (𝜑10) and no node is unused (¬𝜑12), it implies (→) that the system will eventually (◊) reach a state where not all Fog nodes are overloaded (¬𝜑11) and this pattern repeats indefinitely (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f11  or  (f10  and   not f12)) -->   F  not f11)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 157,
    "status": "OK",
    "text": "when all Fog services are overloaded (𝜑16) or when a Fog service is overloaded (𝜑15) and no services is unused (¬𝜑17), it implies (→) that the system will eventually (◊) reach a state where not all Fog services are overloaded (¬𝜑11) and this pattern repeats indefinitely (□)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f16  or  (f15  and   not f17)) -->   F  not f16)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 158,
    "status": "OK",
    "text": " when a Fog node is unused (𝜑12) or is underused (𝜑13) and no node is overloaded (¬𝜑10), it implies (→) that the system will eventually (◊) reach a state where no Fog node is unused (¬𝜑12) and this pattern repeats indefinitely (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f12  or  f13)  and   not f10) -->   F  not f12)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 159,
    "status": "OK",
    "text": "when a Fog service is unused (𝜑17) and no service is overloaded (¬𝜑15), it implies (→) that the system will eventually (◊) reach a state where no Fog service is unused (¬𝜑17) and this pattern repeats indefinitely (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((f17  and   not f15) -->   F  not f17)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 160,
    "status": "OK",
    "text": "when a service is overloaded (𝜑15) and another service is unused (𝜑17), it implies that the next (◯) expected state is when requests redirection across Fog services is applied (𝜑18), until (U ) no Fog service instance is overloaded (¬𝜑15) and this pattern is always true (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f15  and  f17) -->  X f18) U  (not f15))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 161,
    "status": "OK",
    "text": "when a Fog node is overloaded (𝜑10) and another Fog node is unused or underused (𝜑12 ∨ 𝜑13), it implies that the next (◯) expected state is when services mobility across Fog nodes is applied (𝜑14), until (U ) no Fog node is overloaded (¬𝜑10) and this pattern is always true (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f11  and  (f12  or  f13)) -->  X f14) U (not f10))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 162,
    "status": "OK",
    "text": "when a Cloud VM is overloaded (𝜑1) and a Fog node is unused or underused (𝜑12 ∨ 𝜑13), it implies that the next (◯) expected state is when services relocating from Cloud VMs to Fog nodes is applied (𝜑19), until (U ) no Cloud VM is overloaded or all Fog nodes are overloaded (¬𝜑1 ∨ 𝜑11) and this pattern is always true (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f1  and  (f12  or  f13)) -->  X f19) U ( not f1  or  f11))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 163,
    "status": "OK",
    "text": "when all Fog nodes are overloaded (𝜑11) and not all Cloud VMs are overloaded (¬𝜑2), it implies that the next (◯) expected state is when services relocating from Fog nodes to Cloud VMs is applied (𝜑20), until (U ) not all Fog nodes are overloaded or all Cloud VMs are overloaded (¬𝜑11 ∨ 𝜑2) and this pattern is always true (□).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((f11  and   not f2) -->  X f20) U ( not f11  or  f2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 164,
    "status": "OK",
    "text": "to visit destinations 1 and 2 in any order and always avoid the obstacle",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not O) and F(D1) and F(D2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 165,
    "status": "OK",
    "text": "eventually one red item, or one item of any color, or every red item from the location (7, 4) is picked",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F pick_one_red_item_at_7_4_open",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 166,
    "status": "OK",
    "text": "eventually one red item, or one item of any color, or every red item from the location (7, 4) is picked",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F pick_one_item_at_7_4_open",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 167,
    "status": "OK",
    "text": "eventually one red item, or one item of any color, or every red item from the location (7, 4) is picked",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F pick_every_red_item_at_7_4_open",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 168,
    "status": "OK",
    "text": "step into water and then visit (6, 4) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not at_dry_B_at_6_1_open",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 169,
    "status": "OK",
    "text": "reach (4,1), but remain dry in the process",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "at_dry U at_4_1_open",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 170,
    "status": "OK",
    "text": "pick two square items from (4, 0) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (picked_2_star_square_4_0_open)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 171,
    "status": "OK",
    "text": "get one item from (1, 2) and one from (3, 1)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (picked_1_star_star_1_2_open) and F(picked_1_star_star_3_1_open)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 172,
    "status": "OK",
    "text": "get one green and one blue item from (7, 4)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (picked_1_green_star_7_4_open) and F(picked_1_blue_star_7_4_open)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 173,
    "status": "OK",
    "text": "reach (5, 4) by only going through the water",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not at_dry U at_5_4_open",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 174,
    "status": "OK",
    "text": "reaching the opposite side of the corridor and not entering the critical section at the same time ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (endR1) and G not (crit1 and crit2) and F (endL2) and G not (crit1 and crit2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 175,
    "status": "OK",
    "text": "After agent j broadcasts its safety adviser SafeAdv j , it can assume the advice to be followed by other agents.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(pre --> not X proj_i_s)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 176,
    "status": "OK",
    "text": "The SLA is declared successful if the service level has been always the expected one, or if a degradation in the service level has been detected, the provider of this service has fixed it.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (SLA_state == succ --> ((HV1_state == IaaSbpl and X Stage_state == ViolFixing) or G V1_state == IaaSpl))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 177,
    "status": "OK",
    "text": "the frequency should never drop below the containment zone (Czone = 49.2 Hz) as at this frequency larger scale frequency response is required to return the system to normal limits and can include load shedding which is hugely disruptive. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (f >= Czone)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 178,
    "status": "OK",
    "text": "the frequency should remain within the statutory limits (Statlim = [49.5, 50.5] Hz) for any normal power losses (i.e., loss ≤ Nloss with a predefined Nloss). ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(loss <= Nloss) --> G (f_in_Statlim)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 179,
    "status": "OK",
    "text": "for infrequent infeed losses specified by the inequality loss ≥ Iloss with a predefined Iloss, the frequency must return within 60 seconds to the statutory limits whenever it leaves that limit.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(loss >= Iloss) --> F (f_in_Statlim) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 180,
    "status": "OK",
    "text": "we consider a two-stage controller for the frequency regulation. The first controller is responsible for bringing the frequency inside an interval I1 and the second controller is responsible for bringing the frequency inside a smaller interval I2 ⊂ I1.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (f >= Czone) and ( not (f_in_I1) --> F (f_in_I1)) and ((f_in_I1 and f6_not_in_I2) --> F (f_in_I2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 181,
    "status": "OK",
    "text": "Globally avoid Obstacles and eventually reach a Desired region",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not Obs) and F (Des)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 182,
    "status": "OK",
    "text": "eventually reach a Desired region",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (Des)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 183,
    "status": "OK",
    "text": "Globally avoid Obstacles and eventually reach Desired regions D1 and D2",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not O) and F (D1) and F (D2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 184,
    "status": "OK",
    "text": "election officials can never select a candidate after the voter has entered the password",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (v_vote --> G ( not eo_select))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 185,
    "status": "OK",
    "text": "always when a broker receives a temperature t, where t ≥ 40 ◦C, this data will be sent to infrastructures.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( ((lf_broker==1) and (fourty<temp) and (receive==1)) --> F (lf_broker==1 and send==1 and receive==0 and msg_tmp==1)) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 186,
    "status": "OK",
    "text": "always when a broker receives a temperature t, where t < 40 ◦C, this data will be sent to infrastructures (this property should not be satisfied).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( ((lf_broker==1 ) and  (temp >= 40)  and  (receive==1)) --> F (lf_broker==1  and  send==1  and  receive==0  and  msg_tmp==1)) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 187,
    "status": "OK",
    "text": "always when a broker receives a speed value v, where v ≤ 30 km/h, it will send it to the infrastructures.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( ((lf_broker==1)  and  (speed <= 30)  and  (receive==1)) -->  F  (lf_broker==1  and  send==1  and  receive==0  and  msg_speed==1))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 188,
    "status": "OK",
    "text": "always when the broker receives a speed value v, where t > 30 km/h, this data will be sent to infrastructures (this property should not be satisfied).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( ((lf_broker==1)  and  (speed > thirty)  and  (receive==1)) -->  F   (lf_broker==1  and  send==1  and  receive==0  and  msg_speed==1)) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 189,
    "status": "OK",
    "text": "always when a broker is active and the received temperature is greater or equal to 40 °C (in our case it is equal to 45 °C), then infrastructure 1 will receive this data.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( ((temp >= 40 ) and ( lf_broker==1)  and  (receive==1)) -->  F   (lf_infl==1  and  receive==1  and  tempsub1==45))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 190,
    "status": "OK",
    "text": "always when a broker is active and the received temperature is less than 40 °C (in our case it is equal to 30 °C), then infrastructure 1 will receive this data (this property should not be satisfied).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( ((temp < 40)  and ( lf_broker==1)  and  (receive==1)) -->  F   (lf_infl==1  and  receive==1  and  tempsub1==30)) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 191,
    "status": "OK",
    "text": "always when the broker is active and the received speed is less or equal to 30 km/h (in our case is equal to 20 km/h), then infrastructure 1 will receive this data.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( ((speed > thirty)  and  (lf_broker==1)  and  (receive==1)) -->  F   (lf_infl==1  and  receive==1  and  spdsub1==130))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 192,
    "status": "OK",
    "text": "always when the broker is active and the received speed is greater than 30 km/h (in our case it is equal to 130 km/h), then infrastructure 1 will receive this data (this property should not be satisfied)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( ((speed <= 30)  and  (lf_broker==1)  and  (receive==1)) -->  F   (lf_infl==1  and  receive==1  and  spdsub1==20))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 193,
    "status": "OK",
    "text": "requires a system to eventually reach o1 or o2 and never visit o3",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( (F (o1  and  F o2)  or  F (o2  and  F o1))  and  o3)  and  (( not o4  and not o5) U o3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 194,
    "status": "OK",
    "text": "visit Ro1 then Ro2 or visit Ro2 then Ro1 and eventually visit Ro3 and don’t visit Ro4 and Ro5 until visiting Ro3",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( (F (o1  and  F o2)  or  F (o2  and  F o1))  and  o3)  and  (( not o4  and   not o5) U o3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 195,
    "status": "OK",
    "text": "R16: The doors(main door, patio) and windows must be open and unlocked until the smoke level is less than threshold t",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( X ( (doors_i==open and windows_i==open) U (smoke_level < t)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 196,
    "status": "OK",
    "text": "R35: The flood sensor is deactivated after two minutes and evaporation starts with a constant rate of V until the water level reached zero",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( X (( flood_sensor==activated and deactivate_flood_sensor) --> (flood_sensor==deactivated and (evaporation_v U (water_level==0))) ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 197,
    "status": "OK",
    "text": "t is always the case that eventually the car believes it is safe or that it is in the process of braking",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (B_car_safe --> G (F (B_car_safe or B_car_braking)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 198,
    "status": "OK",
    "text": "each time the agent believes it is patrolling position a, with the mast open and the arm closed, and then eventually it will believe it is patrolling position b, with the mast closed and the arm open instead",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((B_cur_patrol_a and B_cur_mast_open and B_cur_arm_close) --> ( F (B_cur_patrol_b and B_cur_mast_close and B_cur_arm_open)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 199,
    "status": "OK",
    "text": "The system to avoid region P2 and reach region P1.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "P3 U P1",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 200,
    "status": "OK",
    "text": "absolute liveness property ( if 𝜑 is satisfiable and 𝜑 and F 𝜑 are expressively equivalent.)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G a or G F b)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 201,
    "status": "OK",
    "text": "safety property",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": " G(not Sunsafe) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 202,
    "status": "OK",
    "text": "visiting a pit represents a safety violation",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not pit)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 203,
    "status": "OK",
    "text": "reach and stay over bounded time intervals",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G (Ks)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 204,
    "status": "OK",
    "text": "the robot can go and pick up the package and bring it to the collection point for the client, without running into any obstacle",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "((not obs and not col) U pac) and ( not obs U col)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 205,
    "status": "OK",
    "text": "the value of y will eventually remain always positive or always negative",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F G (y >= 0)) or (F G (y <= 0))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 206,
    "status": "OK",
    "text": "the agent can pick up a parcel at p1 and must deliver it to p3. If the agent visits p2 while carrying a package, he loses the parcel and has to restart by picking up a new parcel at p1. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (p1 and ( not p2 U p3))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 207,
    "status": "OK",
    "text": "the valuation of the continuous variable x reaches −1 before a total time of 10",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (x <= minus_1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 208,
    "status": "OK",
    "text": "the continuous variable x reaches the valuation of −1 within a time bound of 10 (as before) and with a time bound of 12",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": " F (x <= minus_1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 209,
    "status": "OK",
    "text": "property 1: eventually the number of objects a in NC4 will be greater than 0",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( (NC4_a > zero) and PInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 210,
    "status": "OK",
    "text": "properties 2, 3 that state that the number of a objects in compartments NC1–NC3 will not exceed 1 or 2.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( ((NC1_a <=2) and (NC2_a <=1) and (NC3_a <=2)) or (not PInS)) and  (not (F ((NC3_a > two ) and PInS)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 211,
    "status": "OK",
    "text": "Property 4 checks if the computation will halt with an a in compartment NC1 and empty compartments NC2 and NC3",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( NC1_a ==1 and NC2_a==0 and NC3_a==0 and PInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 212,
    "status": "OK",
    "text": "property 7 states the context in which the computation will halt, with a particular final configuration: if in a step there are 0 objects a in the first compartment, then the computation will eventually halt, with one a in the first compartment and empty compartments NC2 and NC3.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((NC1_a == 0 and pInS) --> F (((NC1_a == 1 and NC2_a == 0) and NC3_a == 0) and pInS)) or not pInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 213,
    "status": "OK",
    "text": "Properties 1–6 check the number of objects in different compartments, at any time.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((NC1_a >= 0 and NC1_a <= 6) or not pInS) and G ((NC2_a >= 0 and NC2_a <= 1) or not pInS) and G ((NC3_a >= 0 and NC3_a <= 1) or not pInS) and G ((NC4_a >= 0 and NC4_a <= 2) or not pInS) and G ((NC5_a >= 0 and NC5_a <= 2) or not pInS) and G ((NC6_a >= 0 and NC6_a <= 2) or not pInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 214,
    "status": "OK",
    "text": "These are summarised in Property 7, which shows that the number of objects in NC2, NC3 is maximum 1 and in NC4–NC6 is maximum 2. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((((NC2_a <= 1 and NC3_a <= 1) and NC4_a <= 2) and NC5_a <= 2) and NC6_a <= 2) or not pInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 215,
    "status": "OK",
    "text": "Property 8 checks that the number of objects a in first compartment is decreasing. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((NC1_a == 3 and pInS) --> X (not pInS U (NC1_a == 2 and pInS))) or not pInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 216,
    "status": "OK",
    "text": "Properties 9 and 10 show that the number of objects in NC7 and NC8, respectively, is bounded by the initial number of objects (6 in NC1). ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((NC7_a >= 0 and NC7_a <= 6) or not pInS) and G ((NC8_a >= 0 and NC8_a <= 6) or not pInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 217,
    "status": "OK",
    "text": "Property 11 proves that eventually the sum of objects in NC7 and NC8 is the same as the initial number of objects in NC1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (NC_7_to_8_a == 6 and NC_1_to_6_a== 0 and pInS)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 218,
    "status": "OK",
    "text": "it is always the case that the AV is supposed to watch for any road users (RU) at the junction (JC) and there are no road users crossing the junction and there is a safe gap (SG). Then, no road users crossing the junction and the existence of a safe gap should remain true, until the AV may enter the junction.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (watch_AV_JC_RU and ( not cross_RU_JC and exists_SG_JC)) --> ((exists_SG_JC and not cross_RU_JC) U enter_AV_JC) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 219,
    "status": "OK",
    "text": "it is always necessary to watch out for road users (RU) and check if there is a road user crossing the junction. Then, the AV should give way to traffic.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (watch_AV_JC_RU and cross_RU_JC) --> give_way_AV_JC)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 220,
    "status": "OK",
    "text": "when there is a stop sign (ST), then it is always the case the AV should stop at the junction until there is a safe gap (SG). And the safe gap must remain true until the AV enter at the junction.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "exists_ST_JC --> G (stop_AV_JC U (exists_SG_JC and (exists_SG_JC U enter_AV_JC)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 221,
    "status": "OK",
    "text": "It is always the case that when there is an AV driving on a Road (RO) and the AV enters the junction. And there is a Broken White Line (BWL) or a Give Way sign (GW), then the AV should give way to the traffic on the Main Road (MR).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((exists_AV_RO and enter_AV_JC) and ((exists_BWL_JC or exists_GW_JC) --> give_way_AV_MR))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 222,
    "status": "OK",
    "text": "Liveness: Invoking an action 𝐴𝑘 should change the properties it affects in the next state.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "i_Ak --> X  c_Pl",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 223,
    "status": "OK",
    "text": "Safety 1: A property can only be altered when an action that alters it is invoked or the environmental property it senses changes.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not c_Pk) -->( (not c_Pk) U (i_Al or e_Pk))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 224,
    "status": "OK",
    "text": "Safety 2: Invoking an action does not alter any properties other than the properties specified in its mapping.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "( i_Ak and not X e_Pl ) --> not X c_Pl",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 225,
    "status": "OK",
    "text": "Liveness of Action 𝐴1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( i_Ai --> X ( c_P1 and c_P2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 226,
    "status": "OK",
    "text": "Liveness of Action 𝐴2",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( i_A2 --> X c_P2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 227,
    "status": "OK",
    "text": "Safety of property 𝑃1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((not c_P1) -->( (not c_P1) U (i_A1 or e_P1))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 228,
    "status": "OK",
    "text": "Safety of property 𝑃2",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((not c_P2) -->( (not c_P2) U (i_A1 or i_A2 or e_P2))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 229,
    "status": "OK",
    "text": "Safety of property 𝑃3",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (((not c_P3) -->( (not c_P3) U (e_P3))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 230,
    "status": "OK",
    "text": "Safety of action 𝐴1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (( i_A1 and not X e_P3) --> not X c_P3 )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 231,
    "status": "OK",
    "text": "Safety of action 𝐴2",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( i_A2 and not X e_P1 and  e_P3) --> not X (c_P1 and  c_P3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 232,
    "status": "OK",
    "text": "onsider a robot that needs to enter a specific room p1 and to stay charged it should return to a base station p2 in the hallway",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not p2 and safe) U p1 ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 233,
    "status": "OK",
    "text": "and its safe return, where safe is defined based on avoiding any closed doors",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "( ((not door) or (not closed)) U p2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 234,
    "status": "OK",
    "text": "a robot synthesised using this specification will eventually clean the room, and then leave the room while leaving the room unlocked.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (ROOMCLEAN and (X F not INROOM) and (X F not DOORLOCKED))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 235,
    "status": "OK",
    "text": "turn on the heater when the room temperature goes below 15C. (means 25)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(temp > twentyfive and cooler==off and turnon_cooler) --> cooler==on",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 236,
    "status": "OK",
    "text": "error states are never reached.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not ((active_DLL_MS==1) and (DLL_ME_ASND==true))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 237,
    "status": "OK",
    "text": "when the Managing Node (MN) is not in the asynchronous phase, the Controlled Node (CN) must also not be in the asynchronous phase.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (active_DLL_MS !=2 --> active_DLL_CS !=2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 238,
    "status": "OK",
    "text": "when the CN completes the asynchronous phase, the MN must be in the asynchronous completion phase.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (active_DLL_CS==2 --> F (active_DLL_MS==0))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 239,
    "status": "OK",
    "text": "the CN must also be in the asynchronous phase when the MN transfers from the isochronous phase to the asynchronous phase.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((active_DLL_MS==1 and X (active_DLL_MS==2)) --> (active_DLL_CS==2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 240,
    "status": "OK",
    "text": "after the CN sends a request, the MN must respond. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (DLL_CE_PREQ==true -->  F DLL_ME_PRES==true)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 241,
    "status": "OK",
    "text": "the MN always receives asynchronous frames after granting the authorization to the CN.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (SoAAuthorization==1 --> F DLL_ME_ASND==true)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 242,
    "status": "OK",
    "text": "whether external events remain unchanged",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not F (G (xDLL_ME_SOC_TRIG) and G (not xDLL_ME_SOC_TRIG))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 243,
    "status": "OK",
    "text": "the asynchronous phase of CN should be completed in five time units",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (time_DLL_CE_SOA_minus_time_DLL_CE_SOC<=5)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 244,
    "status": "OK",
    "text": " the system never enters the spoiled state and that its temperature never exceeds 8 degrees Celsius.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not spoiled and temp < 8)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 245,
    "status": "OK",
    "text": "temperature never exceeds 8 degre",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G temp <= 8",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 246,
    "status": "OK",
    "text": "if the APR(i, M) is always true, then the state can never take value end. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G APr  --> G state!=end",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 247,
    "status": "OK",
    "text": "if the APR(i, N) is always true, then the N+1 is always 0 if the state is different from s0 (i.e., the state before a Readsf). ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G APr --> G (state != s0 --> ReadSV_32_to_32 == 0ud1_0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 248,
    "status": "OK",
    "text": "if it is possible to reach a state where the violation of the APR(i, N) holds, then it is possible to reach the state end (the state where the read has violated the access policy). ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not APr --> F state == end",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 249,
    "status": "OK",
    "text": "if APr is violated, then the state eventually become end",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F( not APr) --> F (state==end)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 250,
    "status": "OK",
    "text": "If the APx is always true, then the PC never assumes value END",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(APx) --> G (state != s0 --> PC != END)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 251,
    "status": "OK",
    "text": "The agent described by the dynamics in (1) can collect a package at p1 and must deliver it to the target region p3 (cf. Fig. 1). If the agent visits the avoid region p2 whilst carrying a package, he loses the package and has to restart by picking up a new package at p1.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (p1 and (not p2 U p3))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 252,
    "status": "OK",
    "text": "if the system starts from X1, it must always stay away from X0 and X2, and if it starts from X4, it must always stay away from X3 and X5",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(p1 and G not (p0 or p2)) or (p4 and G not (p3 or p5))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 253,
    "status": "OK",
    "text": "every node of the network must agree on the same block and add that block to its copy of the blockchain. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F ( (not blockchain0_IsEmpty) and (blockchain0_GetPeekBlock==blockchain1_GetPeekBlock) and (blockchain1_GetPeekBlock==blockchain2_GetPeekBlock)  and  (blockchain2_GetPeekBlock==blockchain3_GetPeekBlock)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 254,
    "status": "OK",
    "text": "all nodes record the same proposed block in their blockchain. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F ( not blockchain0_IsEmpty and proposedBlock == blockchain0_GetPeekBlock and proposedBlock == blockchain1_GetPeekBlock and proposedBlock == blockchain2_GetPeekBlock and proposed_lock == blockchain3_GetPeekBlock))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 255,
    "status": "OK",
    "text": "a leader of a peek block of every copy of the blockchain is the same. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (not blockchain0_IsEmpty and blockchain0_GetBlockLeader_blockchain0_GetPeekBlock==blockchain1_GetBlockLeader_blockchain1_GetPeekBlock  and  blockchain1_GetBlockLeader_blockchain1_GetPeekBlock==blockchain2_GetBlockLeader_blockchain2_GetPeekBlock and  blockchain2_GetBlockLeader_blockchain2_GetPeekBlock== blockchain3_GetBlockLeader_blockchain3_GetPeekBlock))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 256,
    "status": "OK",
    "text": "in each round of consensus protocol there should not be any invalid (duplicate) block submitted by malicious leaders in the copy of blockchain of a node.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (rd > zero and  not blockchain0_ContainsDuplicateBlocks  and  not blockchain1_ContainsDuplicateBlocks  and  not blockchain2_ContainsDuplicateBlocks and not blockchain3_ContainsDuplicateBlocks))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 257,
    "status": "OK",
    "text": "there are no blockchain fork and no selfish mining attacks.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F No_Blockchain_Fork  and  No_Selfish_Mining)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 258,
    "status": "OK",
    "text": "in every round of consensus, a trusted leader is selected",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (rd >= 0  and  leaderSelected == 1))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 259,
    "status": "OK",
    "text": "The trusted validators are selected in every round of consensus protocol",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (rd >= 0  and  valSelected == 1))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 260,
    "status": "OK",
    "text": "all the network nodes must agree on the same block to add it into their chain. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (not bchain0_IsEmpty and bchain0_GetHeadBlock == bchain1_GetHeadBlock and bchain1_GetHeadBlock == bchain2_GetHeadBlock and bchain2_GetHeadBlock== bchain3_GetHeadBlock and bchain3_GetHeadBlock== bchain4_GetHeadBlock and bchain4_GetHeadBlock == bchain5_GetHeadBlock))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 261,
    "status": "OK",
    "text": "in each round of consensus, the honest participants share the same chains because they add the same block proposed by the trusted leader into their chains.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (round > 0 and (bchain0 == bchain1 and bchain1 == bchain2 and bchain2 == bchain3 and bchain3 == bchain4 and bchain4 == bchain5)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 262,
    "status": "OK",
    "text": "Liveness is specified as the combination of chain growth and chain quality. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F ChainQuality and ChainGrowth)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 263,
    "status": "OK",
    "text": "in each round of consensus, the height of the blockchain increases within a bounded time.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (round > 0 and delay <= boundedDelay and (blockchainHeight_0 < blockchainHeight_1 and blockchainHeight_1 < blockchainHeight_2 and blockchainHeight_2 < blockchainHeight_3 and blockchainHeight_3 < blockchainHeight_4 and blockchainHeight_4 < blockchainHeight_5)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 264,
    "status": "OK",
    "text": "in each round of consensus, the proportion of valid blocks is more than invalid blocks.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F (round > 0 and (validBCount0 > invalidBCount0 and validBCount1 > invalidBCount1 and validBCount2 > invalidBCount2 and validBCount3 > invalidBCount3 and validBCount4 > invalidBCount4 and validBCount5 > invalidBCount5)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 265,
    "status": "OK",
    "text": "If a validator is not active or a validator initiate exit process already or a validator does not remain active for 9 days then the validator voluntary exit process will never be initiated",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (F (not (validator_active or no_exit_reques or (computed_epoch>=compulsory_activation_time) )) -->  not(start_exit))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 266,
    "status": "OK",
    "text": "if happened , remains happened",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( happened --> G happened )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 267,
    "status": "OK",
    "text": "when started always true , it eventually happens or expires",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (start) --> F ( happened or expired)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 268,
    "status": "OK",
    "text": "A contract eventually terminates",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( (pizzaC_Cnt_state==sTermination) or (pizzaC_Cnt_state==unsTermination) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 269,
    "status": "OK",
    "text": "In case of late delivery , the restaurant i s penalized no more than once",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( pizzaC_OpayL_state==fulfillment --> G not ( pizzaC_OpayL_state == inEffect) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 270,
    "status": "OK",
    "text": "The pizza is always paid after on−time delivery ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not ( pizzaC_Odel_state == fulfillment) U (Opay_state == fulfillment or OpayL_state == fulfillment )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 271,
    "status": "OK",
    "text": "Within the state-space, we have one goal region with the atomic proposition Goal and a set of hazard regions labeled with Haz",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not Haz U Goal",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 272,
    "status": "OK",
    "text": "Globally, when calculating fitness function for each whale is occurred, then four QoS criteria should be computed in the total fitness function value",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(G (calculate_fitness and calculate) --> X (availability and reliability and cost and responsetime)) --> (total_fitness)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 273,
    "status": "OK",
    "text": "Globally, after calculating total fitness function value; in the next state, the maximum fitness is chosen and respectively best whale is forwarded to decision making process.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(G (total_fitness) --> X (maxfitness_value and choose)) --> X (select_best_whale and forward)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 274,
    "status": "OK",
    "text": "Globally, when maximum iteration value is checked to continue finding optimal solution; finally, probability of best whale is checked with no condition or best solution as optimal service composition is returned to requester.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (check_mexiteration) --> F ((no and check_probability) or (yes and return_best_solution)) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 275,
    "status": "OK",
    "text": "Globally, when maximum iteration value has not achieve to specified value; finally, coefficient vector value is checked with two side. If coefficient vector value is lower than “1” then shrinking method for whale is updated. Otherwise, a whale is selected randomly.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (check_maxiteration and no) --> F (check_coefficient_vector --> ( ((lower and update_shrinking_whale) or (higher and select_random_whale))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 276,
    "status": "OK",
    "text": "Globally, when maximum iteration value has not achieve to specified value; next sate is checking probability value. If probability value is lower than “0.5” then coefficient vector value is checked. Otherwise, spiral method for specified whale is updated.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (check_maxiteration and no) --> X (check_probability --> ( (lower and check_coefficient_vector) or ( higher and update_spiral_whale)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 277,
    "status": "OK",
    "text": "Globally, calculating fitness function value is computed after updating one of the spiral, shrinking and randomized whale methods.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((update_spiral_whale or select_random_whale or update_shrinking_whale) --> X (process --> calculate_fitness))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 278,
    "status": "OK",
    "text": "Globally, when best whale is selected, this solution is forwarded to check iteration value. If iteration value is higher that the specified value, then optimal solution is return best service composition and the composition procedure will be finalized.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(G ((select_best_whale and forward) --> (check_maxiteration and yes))) --> X (return_best_solution and finish)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 279,
    "status": "OK",
    "text": "p1= \"Ramp will not allow to the aircraft until it get ramp clearance from the ramp controller\"",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (not (ramp_allowed)) U (get_ramp_clearance)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 280,
    "status": "OK",
    "text": "p2= \"Gate will not assigned to the aircraft until it gets permission from the gate controller\"",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(not (gateassigned)) U (gate_clearance)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 281,
    "status": "OK",
    "text": "p3= \"If anywhere aircraft get all three permitions of ramp, assign gate pass then aircraft will be concidered as arived\"",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( F (ramp_allowed and gateassigned and gate_pass)) --> (finally_arrived)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 282,
    "status": "OK",
    "text": "If Vote is casted then miners will check vote correctness and in next step if 70% miners verified that vote is casted correctly then from that step to third next step block will be added to Blockchain.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (( ( F(vote_casted)) --> (X(miner_verifying_vote)) ) --> (X(vote_verified_by_miners_ratio >= 70))) --> (X(X(X(added_to_blockchain)))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 283,
    "status": "OK",
    "text": "Whenever a light switch is triggered in a room i at some timestamp t, then the light must turn on at t + 1 until the switch is turned off again",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (si --> X (i_toned U not si ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 284,
    "status": "OK",
    "text": "Whenever a light switch is triggered in a room i at some timestamp t, then the light must turn on at within any of the next 3 times-tamps until the switch is turned off again",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (si --> F (i_toned U not si ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 285,
    "status": "OK",
    "text": "the light is on starting from the timestamp the switch is turned on and the subsequent two (for a total of 3)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(si --> G(i_toned))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 286,
    "status": "OK",
    "text": " restriction on watching TV for a specific duration",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (tv --> F not tv)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 287,
    "status": "OK",
    "text": "the triggering of an alarm in the house within 5 timestamps of detecting a fire hazard",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "firehazard --> F (firealert)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 288,
    "status": "OK",
    "text": "the car should globally avoid an obstacle (“O”) and eventually reach a desired (“D”) region",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not O) and F(D)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 289,
    "status": "OK",
    "text": "the car should globally avoid an obstacle (“O”) and eventually reach a desired (“D”) region",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not O) and F(D1) and F(D2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 290,
    "status": "OK",
    "text": "If Actor verify that waste can not recycle then in next step this waste will be sent to trash and no recycling process will take place.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (( F (able_to_recycle==0) --> (X (no_recycling) --> (X (X ( recycling==1)) --> X (send_to_trash)))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 291,
    "status": "OK",
    "text": "If Actor verify that waste is able to recycle than nearby office will be searched and waste product will be share to admin and from admin to costumer and costumer will give feedback from that on waste will be consider as managed.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( (F(able_to_recycle == 1)) --> (X(F(search_office)) --> (X(F(send_recycle_product_to_admin)) --> (X(F(recieve_feedback)) --> (X(F(G(waste_is_managed))))))) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 292,
    "status": "OK",
    "text": "ensure that once an event happens, it remains “happened”",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (event_happened --> G event_happened)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 293,
    "status": "OK",
    "text": "verify that if an event starts, then eventually it either happens or expires, thus ensuring its liveness",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (started) --> F (event_happened or event_expired)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 294,
    "status": "OK",
    "text": "MeatSale contract eventually terminates",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(sales_cnt_contract_state == sTermination or sales_cnt_contract_state == unsTermination)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 295,
    "status": "OK",
    "text": "In case of late payment, buyer cannot be penalized more than once",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( (sales_cnt_paidLate_happened and (sales_cnt_paidLate_performer == sales_cnt_Olpay_debtor_name) and sales_cnt_Olpay_debtor_is_performer) --> G (not sales_cnt_paidLate_inactive))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 296,
    "status": "OK",
    "text": "Delivery of goods always happens after payment",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not (sales_cnt_delivered_happened and sales_cnt_delivered_performer == sales_cnt_Odel_debtor_name and sales_cnt_Odel_debtor_is_performer) U (sales_cnt_paid_happened and sales_cnt_paid_performer == sales_cnt_Opay_debtor_name and sales_cnt_Odel_debtor_is_performer)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 297,
    "status": "OK",
    "text": "Buyer resumes the suspended delivery obligation by paying a fine",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (sales_cnt_Odel_state == suspension and (paidLate_happened and paidLate_performer == Olpay_debtor_name and Olpay_debtor_is_performer)) -->  F(sales_cnt_OlatePay_state == fulfillment and sales_cnt_Opay_state == violation)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 298,
    "status": "OK",
    "text": "always normally the connection between the user and the application is constructed",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(F ( I_to_I_UA))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 299,
    "status": "OK",
    "text": "always if the user disconnects with the application then when he/she connects to the internet again then he/she needs to log on to the application again",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( I_to_I_UA --> F (trecon --> F (Wait_epsilon)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 300,
    "status": "OK",
    "text": "always if the user disconnects with the application then when he/she connects to the internet again then he/she needs not to log on to the application again",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( I_to_I_UA --> F ( trecon_I_to_I_UA --> F( not Wait_epsilon)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 301,
    "status": "OK",
    "text": "Agents (Agent1 and Agent2, Agent 2 and Agent 3) cannot connect before publishing the corresponding export and import and subscribing to the import and export.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not ( PortN_port2 and PortN_port3 ) U ( PSEx_agent2 and PSIm_agent2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 302,
    "status": "OK",
    "text": "Tomcat cannot be started before the Data provider MySQL; Apache1 cannot be started before the Work provider Tomcat.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((Sst and bi2_agent2_port2_stopped) U (Sst and bi3_agent3_port3_started)) and G ((Sst and bi1_agent1_port1_stopped) U (Sst and bi2_agent2_port2_started))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 303,
    "status": "OK",
    "text": "After Apache1 receives the Remove demand, it should be stopped and the connection (binding) between Apache1 and Tomcat should be broken.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( RM2_epsilon --> (Sst and bi1_agent1_port1_stopped and PortN_port2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 304,
    "status": "OK",
    "text": " whenever there is a bottle at position 2, both ingredients are filled in that bottle",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (bottle_present_2 --> (bottle_ingr1_2 and bottle_ingr2_2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 305,
    "status": "OK",
    "text": "except for fault[0] and fault[1], everything else is observable",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not (fault_0 or fault_1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 306,
    "status": "OK",
    "text": "Trans to p occ. at most twice (betw. q and r)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((q and F r) --> ((not p and not r) U (r or (( p and not r) U (r or ((not p and not r) U (r or (( p and not r) U (r or (not p U r))))))))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 307,
    "status": "OK",
    "text": "Trans to p occ. at most twice (after q until r)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (q --> ((not p and not r) U (r or (( p and not r) U (r or ((not p and not r) U (r or (( p and not r) U (r or (not p U r) or G p)))))))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 308,
    "status": "OK",
    "text": "p precedes s, t (after q until r) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( q --> (((not (s and not r and X (not r U (t and not r)))) U (r or p)) or G(not (s and X (F t)))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 309,
    "status": "OK",
    "text": "p responds to s, t (between q and r)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( ((q and F r) --> ( (s and X (not r U t)) --> X (not r U (t and F p)))) U r)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 310,
    "status": "OK",
    "text": "p responds to s, t (after q until r)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (q --> (((( s and X (not r U t)) --> X (not r U (t and F p)))) U (r or G (((s and X (not r U t)) --> X (not r U (t and F p))) ))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 311,
    "status": "OK",
    "text": "s, t responds to p (after q until r) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (q --> (( p --> (not r U (s and not r and X (not r U t)))) U (r or G ( p --> (s and X F t)))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 312,
    "status": "OK",
    "text": "s, t without z responds to p (betw. q and r)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((q and F r) --> (( p --> (not r U (s and not r and not z and X ((not r and not z) U t)))) U r))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 313,
    "status": "OK",
    "text": "s, t without z responds to p (after q until r) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (q --> (( p --> (not r U (s and not r and not z and X ((not r and not z) U t)))) U (r or G ( p --> (s and not z and X (not z U t))))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 314,
    "status": "OK",
    "text": "The total amount of the factory, the supplier, the truck, and the smart contracts’ account should remain unchanged throughout the transaction",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( fa_Acc_plus_su_Acc_plus_t_Acc_plus_sca_Acc_plus_scb_Acc == invar)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 315,
    "status": "OK",
    "text": "During the transaction, it is impossible for the supplier to rent the truck before the factory transfers the payment to SCa.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((not rent_truck U pay_sca) or not pay_sca)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 316,
    "status": "OK",
    "text": "During the transaction, it is impossible for the truck to receive the fare before the supplier receives the payment",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((not tr_recfund U su_recfund) or not su_recfund)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 317,
    "status": "OK",
    "text": "After the transaction, the total amount of the factory, the supplier, and the truck’s account will eventually remain unchanged.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (trade_finish --> F ( fa_Acc_plus_su_Acc_plus_t_Acc == invar))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 318,
    "status": "OK",
    "text": "If the transaction is successful, the factory account balance is the initial balance minus the payment, the supplier account balance is the initial balance plus the payment minus the fare, and the truck account balance is the initial balance plus the fare",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (trade_success --> ( F ( fa_Acc == fa_AccInit_minus_pay_goods) and  F (su_Acc == su_AccInit_minus_fare_goods_plus_pay_goods) and F (t_Acc == t_AccInit_plus_fare_goods)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 319,
    "status": "OK",
    "text": "Under normal trading conditions, when the truck delivery is successful, the time should be between 9 a.m. and 5 p.m.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(time >= 9 and time <= 17)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 320,
    "status": "OK",
    "text": "the event WLToCtrl always happens after WLToSen, which means that the occurrence of WLToCtrl is inevitable after the event WLToSen.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (WLToSen --> F WLToCtrl) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 321,
    "status": "OK",
    "text": "the event CorrectHL always happens after the event FalseHL, which means that the values of H and L can be recovered after an attack",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (FalseHL --> F CorrectHL)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 322,
    "status": "OK",
    "text": "the event ObtainHL can always happen, which means that CtrlWithCon can detect the attacks",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F ObtainHL ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 323,
    "status": "OK",
    "text": "the event WLToCtrl always happens after WLToSen.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (WLToSen --> F WLToCtrl)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 324,
    "status": "OK",
    "text": "P4. When User sends updateScript or getScript to iface without sending powerOff afterwards, and SoC is in LCMS mode, then User must receive a scriptResp message.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( G ifaceIsInStatePOnLcmOn --> G (ifaceHasScriptMessage --> F (userHasScriptResp or ifaceHasPowerOff)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 325,
    "status": "OK",
    "text": "P5. Writes on SecureStorage must correspond to update-Script(true) messages sent to the manager.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (managerHasValidUpdate --> F (memoryWrite or iface_HasPowerOff))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 326,
    "status": "OK",
    "text": "P6. When SecureStorage receives a setScript message, it must always be followed by setConfig before the next setIPs message is sent to SoCIPs by ipCtrlr.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F IPsHasSetIP --> ((sstrHasSetScript --> (not IPsHasSetIP U (sstrHasSetConfig and not IPsHasSetIP))) U IPsHasSetIP))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 327,
    "status": "OK",
    "text": "the living-room lights to be turned on when it gets dark",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(dark --> X light_on)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 328,
    "status": "OK",
    "text": "every initiated action a is eventually completed by robot r",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( begin_a_r --> X F end_a_r)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 329,
    "status": "OK",
    "text": "the transaction client in Example 1 eventually gets notified whenever the gas fee is paid",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (PaidGas --> F Notified)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 330,
    "status": "OK",
    "text": "When a connection is made to the POP server, mail will be transferred to the local machine and handled by the message handling subsystem.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ((PopServerConnected and F PlacedinMailboxes) --> ( not PlacedinMailboxes U MessagesTransfered))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 331,
    "status": "OK",
    "text": "S responds to P after Q",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Q --> G (P --> F S ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 332,
    "status": "OK",
    "text": "p1= Ramp will not allow to the aircraft until it gets ramp clearance from the ramp controller.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not (rampallowed)) U (getrampclearance)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 333,
    "status": "OK",
    "text": "p2= Gate will not be assigned to the aircraft until it gets permission from the gate controller.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not (gateassigned)) U (gateclearance)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 334,
    "status": "OK",
    "text": "p3= If any aircraft gets all three permissions of ramp, assign gate and gate pass then aircraft will be considered as arrived.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F (rampallowed and gateAssigned and gatepass)) --> (finallyarrived)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 335,
    "status": "OK",
    "text": "When a vehicle requests a parking space, it is always the case that for every vehicle, it eventually exits the system, either successfully after being granted a parking space, or unsuccessfully, when its request is denied",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( PR_x --> F (ES_x or  EU_x))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 336,
    "status": "OK",
    "text": "It is always the case that if the client occupies a parking lot, it will eventually exit the parking lot.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( OP_x --> F (ES_x))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 337,
    "status": "OK",
    "text": "There may be clients who have requested parking and who wait in the parking unavailable state until they can exit the system.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( PR_x and F ( PU_x U EU_x ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 338,
    "status": "OK",
    "text": "The ground waiting phase enters the takeoff ground segment when the following conditions are met simultaneously: The route and airport altitude have been bound; Received takeoff instructions.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((phase == 0 and air_line == 1 and pressure_altitude == 1 and takeoff) --> phase == 1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 339,
    "status": "OK",
    "text": "In the takeoff ground segment, when the airspeed is greater than 30 m/s and the altitude is greater than 15 m, turn to the takeoff departure zone.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((phase == 1 and airspeed > 30 and height > 15) --> phase == 2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 340,
    "status": "OK",
    "text": "In the takeoff departure zone, when the flight altitude is greater than the safe altitude of 80 m, enter the climb phase 1.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((phase == 2 and height > eighty) --> phase == 3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 341,
    "status": "OK",
    "text": "After taking off, the drones should reach the flight height of 200 m within 900 cycles and keep to this altitude within the range of (195,205) m for the rest of the flight until the flight state becomes “descending”.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(F(height >= 200)and(phase == fixed_height --> (( onehundredninetyfive <= height and  height <= 205) U (phase == descent))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 342,
    "status": "OK",
    "text": "When the altitude of the drone is less than 300 m, the radio altimeter must be activated and remain active (altitude status value is 2).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(height < 300 --> height_state == radio)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 343,
    "status": "OK",
    "text": "when the drone is in level flight, the variance of the pitch angle data for the first 300 cycles ending with the current cycle must be calculated and its value should not continue to exceed 5.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((state == fixed_height) --> (VAR300_pitch < 5))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 344,
    "status": "OK",
    "text": "When the drone is flying, it will be given 1000 cycles to adjust the direction after reaching a navigation point. Then the absolute value of the roll angle of the drones shall be less than 5 until it reaches the next anchor point.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(arrive --> (X G( minus5 < rool and rool < 5) U arrive))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 345,
    "status": "OK",
    "text": "The drones can normally enter the air stop state when the conditions are met: (1) The speed is less than 1000 RPM; (2) The lubricating oil pressure is less than 1.5 bar; (3) The landing gear is in a compressed state; (4) Flight altitude greater than 60 m; (5) The flight phase is not a ground hold. When all the above conditions are met simultaneously, then (1) Judge the engine’s air stop; (2) When the flight phase is before glide down 1, place a falling flag.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((rotate_speed < 1000 and oil_press < 1_5 and undercarriage == 0 and height > sixty and phase6 == ground_wait) --> ((engine_status == flameout_air or engine_status == pre_start or engine_status == start or start_estimate) and (phase == drift)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 346,
    "status": "OK",
    "text": "Suppose we have a team of two robots and consider the case of k = 1. The task requires the robots to eventually visit either region a or region b, but these two regions cannot be visited both.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(a and not b) or F( not a and b)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 347,
    "status": "OK",
    "text": "task for stationary car as b and the goal region as a",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not b) and F(a)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 348,
    "status": "OK",
    "text": "for all times, if a pedestrian is on the road, slow down until she reaches the sidewalk",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(por --> (sd U pos))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 349,
    "status": "OK",
    "text": "regions corresponding to o1, o2, o3 are areas of the state space that must be visited infinitely often and the one corresponding to o4 is a dangerous area that must be avoided at all times",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (F (o2 and F (o1 and F o3))) and G (not o4)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 350,
    "status": "OK",
    "text": "requires the system to visit the regions Ro1 , Ro2 , Ro3 , Ro4 infinitely often and always avoid regions Ro5 , Ro6 , Ro7 , Ro8 , Ro9",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( F o1 and F o2 and F o3 and F o4) and G not (o5 or o6 or o7 or o8 or o9)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 351,
    "status": "OK",
    "text": "Whenever the driver brakes while the velocity is above the minimum activation velocity umin nd when there is negative slip that is less than threshold φ, the wheel circumference is decelerating and the car is not yawing to either side more than radians per second while the driver is not steering more than ξ radians to either side, then valve VI shall be closed, VO opened, and the brake pump P shall be off to release brake pressure.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(( driverBrakes and v_R >= v_min and  lamda_B <= f and a <= minus_a and yaw_absolute <= theta and b_absoluta <= ksi ) --> (not VI and VO and not P))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 352,
    "status": "OK",
    "text": "Whenever the driver brakes while the velocity is above the minimum activation velocity umin, the car is yawing to the left more than θ radians per second while the driver is relatively straight (not more than ξ radians to either side), then valve VI shall be closed, VO opened, and the brake pump P shall be off to release brake pressure.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((driverBrakes and v_R >= v_min and yaw < minus_theta and b_absolute < ksi) --> (not VI and VO and not P))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 353,
    "status": "OK",
    "text": "Whenever the brake pump is increasing the pressure slowly, it will continue to do so if the pressure is still too low for the acceleration a of the wheel’s circumference to be below -a and if the driver continues braking and steering straight ahead, the road conditions stay symmetric and the vehicle is moving fast enough for the system to be active.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(( P == SLOW and X (driverBrakes and v_R >= v_min and a > minus_a and b_absolute < ksi and yaw >= minus_theta)) --> X (P == SLOW))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 354,
    "status": "OK",
    "text": "Whenever the acceleration of the wheel’s circumference is less than -a while the driver is braking, the vehicle velocity is above the minimum activation velocity, the driver is steering relatively straight ahead (no more than ξ radians to either side), and the vehicle is not turning to the left more than θ radians per second, the brake pressure will not be increased until any of these conditions change.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G((a < minus_a and driverBrakes and v_R >= v_min and b_absolute < ksi and yaw >= minus_theta) --> ((not VI) U  not (a < minus_a and driverBrakes and v_R >= v_min and b_absolute < ksi and yaw >= minus_theta)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 355,
    "status": "OK",
    "text": "regions corresponding to o1, o2, o3 are areas of the state space that must be visited infinitely often and the one corresponding to o4 is a dangerous area that must be avoided at all times",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (F (o2 and F (o1 and F o3))) and G (not o4)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 356,
    "status": "OK",
    "text": "requires the system to visit the regions Ro1 , Ro2 , Ro3 , Ro4 infinitely often and always avoid regions Ro5 , Ro6 , Ro7 , Ro8 , Ro9",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( F o1 and F o2 and F o3 and F o4) and G not (o5 or o6 or o7 or o8 or o9)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 357,
    "status": "OK",
    "text": "R1 successfully completes the task only when eventually reaches an area approximately corresponding to the destination point",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F( not (X_d1dd or X_ddd1))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 358,
    "status": "OK",
    "text": "eventually R1 needs to be in the kitchen area (although with greater approximation than the first solution). The subformula X(B_1dd ∨ B_d1d) forces the robot to have at least a 25% charge the moment after entering the kitchen, which gives the robot sufficient battery charge to reach the destination",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(X_dd1d and X (Y_1ddd and (B_1dd or B_d1d)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 359,
    "status": "OK",
    "text": "R1 has to eventually grasp the item",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F(Grasp)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 360,
    "status": "OK",
    "text": "R1 has to eventually enter and remain in an area approximately corresponding to the kitchen.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G X_d1dd)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 361,
    "status": "OK",
    "text": "R1 should not go towards the charging station and remain there (evidently, stuck in front of the closed passage until its charge runs out).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (G ( not X_1ddd))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 362,
    "status": "OK",
    "text": "the vehicle infinitely often visits the subsets labeled by .target1 and .target2, always avoids the subset labeled by .obstacles, and always uses low-velocity values labeled by .low_speed",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F target1 and G F target2 and F not obstacles and G low_speed",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 363,
    "status": "OK",
    "text": "The drone performs infinitely often two different pickup-and-delivery tasks and When a task starts, it should be completed without starting another task and Some obstacles must be always avoided",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (not Obstacles) and G F (Pickup1) and G F (Pickup2) and G (Pickup1 --> ((not Pickup2 and not Delivery2) U Delivery1)) and G (Pickup2 --> ((not Pickup1 and not Delivery1) U Delivery2)) and G ( not low_battery) and G F (full_battery)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 364,
    "status": "OK",
    "text": "Two adjacent philosophers cannot eat at the same time ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (philosopher_1_is_eating --> not philosopher_2_is_eating)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 365,
    "status": "OK",
    "text": "Each philosopher can only perform one action at a time ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(philosopher_1_is_thinking --> not philosopher_1_is_hungry)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 366,
    "status": "OK",
    "text": "requires the robot to sequentially visit the black zone and the white zone while avoiding colliding with red zones and yellow zones",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not Red_Zone and not Yellow_Zone) U (Black_Zone and ((not Red_Zone and not Yellow_Zone) U White_Zone))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 367,
    "status": "OK",
    "text": "requires the agent to encounter the ball with Yellow, Purple, Megenta, Orange and Gray in order while avoiding Pink, Green and Blue balls.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not Pink and not Green and not Blue) U (Yellow and ((not Pink and not Green and not Blue) U (Purple and ((not Pink and not Green and not Blue) U (Megenta and ( (not Pink and not Green and not Blue) U (Orange and ((not Pink and not Green and not Blue) U Gray))))))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 368,
    "status": "OK",
    "text": "requiring the robot to visit the red zone, black zone, and yellow zone in order",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (Red_Zone and F (Black_Zone and F Yellow_Zone))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 369,
    "status": "OK",
    "text": "No sybil attack is ensured when a trusted certificate authority registers unique nodes. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G noSybilAttack",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 370,
    "status": "OK",
    "text": "eventually no eclipse attack can occur on the network of the proposed protocol.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G noEclipseAttack",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 371,
    "status": "OK",
    "text": "The consensus is defined as each node of the network should agree on one block to commit it into its copy of the blockchain.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F TrustBlockConsensus",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 372,
    "status": "OK",
    "text": "The trust/transactions block consensus is defined below as the top block of each node’s trust/transactions chain must be the same.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F TransBlockConsensus",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 373,
    "status": "OK",
    "text": "always no double spending can occur. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G noDoubleSpending",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 374,
    "status": "OK",
    "text": "the proposed protocol is fraud-resilient in normal conditions or when the leader is honest",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G fraudResilience",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 375,
    "status": "OK",
    "text": "Either any response with unmatched VNN-PRVN and VNN-RVNI should not be encountered, or any response (RSP1 and RSP2) frame should not be detected after the QRP request frame is sent before the system terminates.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "((not P5 and not P7) and (P3 --> X not P8)) U P8",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 376,
    "status": "OK",
    "text": "a should never hold and b must finally hold. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (not a) and (F b)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 377,
    "status": "OK",
    "text": "a red light should be immediately followed by a green light",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (red --> (X green))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 378,
    "status": "OK",
    "text": "An arbitration identifier that appears thrice in a row (or more).",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not (id and X id and X X id)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 379,
    "status": "OK",
    "text": "An arbitration identifier that is invalid (i.e., an arbitration identifier that does not belong to the set of unique arbitration identifiers collected under attack-free conditions)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (id1 or is2 or idn )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 380,
    "status": "OK",
    "text": "we obtain the prize BAR3 for displaying “bar” at all three reels within specific numbers of total reels.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F BAR3 ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 381,
    "status": "OK",
    "text": "we have the output crash representing the stochastic failure within specific numbers of messages",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F crash",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 382,
    "status": "OK",
    "text": "the robot reaches the goal position within n steps",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F goal",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 383,
    "status": "OK",
    "text": "the algorithm finishes within specific numbers of messages.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F finished",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 384,
    "status": "OK",
    "text": "the robot reaches the goal position without entering the hole position",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not hole) U goal",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 385,
    "status": "OK",
    "text": "We address the problem of shielding a controllable RL agent in an environment shared with other autonomous agents that perform tasks concurrently. For example, some combinations of agent positions may be unsafe, as they correspond to collisions. The specification then forbids visiting such states,",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not Scollision)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 386,
    "status": "OK",
    "text": "unsafe states must not be entered, i.e., that collisions are never allowed. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not (xA == xE and yA == yE ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 387,
    "status": "OK",
    "text": "the heads of the snake should not collide and that the head of the avatar snake should not crash into the body of the adversary snake or its own body.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G( not Collision_Heads_head_s1_head_s2 and  not Collision_Bodies_head_s1_body_s1_tail_s1_body_s2_tail_s2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 388,
    "status": "OK",
    "text": "for every step between 0 and t, the amount of time during which UP holds is at least 90% of the elapsed time",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (dur_UP > Time_times_0_9)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 389,
    "status": "OK",
    "text": "always, every request must eventually be followed by a grant",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (req --> F grant)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 390,
    "status": "OK",
    "text": "integer overflows/underflows vulnerability: safety property where xIsOutOfRange is a proposition that evaluates to true if the value of x is not included in the range of its type which we delimit by defining lower and higher thresholds",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (not (x < minThreshold) or (x > maxThreshold))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 391,
    "status": "OK",
    "text": "vulnerability in Ether transfer: safety property  where reentrantMfsi is true if the necessary condition under which a reentrancy vulnerability can be detected in the function f in the smart contract si is valid. his condition can only be defined when the user indicates the variable x serving as a record for balances and whose assignment should be watched. Such a condition expresses the presence of a sending statement which is not preceded by an assignment to x",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not (( not X Assignment) U Sending) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 392,
    "status": "OK",
    "text": " vulnerability in Ether transfer: If the code of the interacting contract sj is available",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": " SendingTosj --> X G ((not SendingTosj ) U endOf_Fallbacksj)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 393,
    "status": "OK",
    "text": "The objective of the robot is to reach the goal state “G” while avoiding hazard “H” states. Additionally, before it reaches the goal, it must traverse either the “A1” or “A2” states and then the “B” state.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not H U Goal) and (not Goal U B) and (not B U (A1 or A2))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 394,
    "status": "OK",
    "text": "In smart contract development, reentrancy vulnerabilities can be prevented by using the reentrancy guard modifier from the OpenZeppelin library. This modifier ensures that no reentrant calls can be made to a function. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( rg --> not fe )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 395,
    "status": "OK",
    "text": "For contracts not using the reentrancy guard, the CEI pattern should be followed to prevent reentrancy vulnerabilities. This pattern involves three steps: first, performing a condition check (Checks), then updating the contract state (Effects), and finally executing external interactions (Interactions). This order stops attackers from using callback functions to reenter the contract before the state update.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( c --> F e ) and G ( e --> F i )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 396,
    "status": "OK",
    "text": "the sprinkler in room 2 can only be turned on when there is a fire in room 2",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not SENSOR_DETECTED_2 --> not springler_2_on)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 397,
    "status": "OK",
    "text": "safety property, which asserts that something bad will never happen ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not f",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 398,
    "status": "OK",
    "text": "liveness property that asserts that something good will eventually happen",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F f",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 399,
    "status": "OK",
    "text": "generative reactive 1 (GR(1)) that is tailored to reactive systems",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Assumption --> Guarantees",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 400,
    "status": "OK",
    "text": "Kyrkog. Geometry, P-Lot Geometry, etc. that describe the drivable space. We also embed any speed limits and heading constraints into these formulae",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "Kyrkog_Geometry and (y < 3 --> (zero_4 < v and v < 1_0)) and (y>=3 --> ( v > zero_3 and v < 0_6)) and (y < 1_8 -->  ( theta > pi_divided_by_5 and theta < minus_pi_divided_by_5) ) and (y >= 1_8 --> (theta > four_times_pi_divided_by_5 or theta < minus_four_times_pi_divided_by_5) ) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 401,
    "status": "OK",
    "text": "the vehicle to park in one of the two empty parking spots.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": " Parking_Spot_1 or Parking_Spot_2",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 402,
    "status": "OK",
    "text": "allow the vehicle to go either left or right inside parking lot",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "( ((Kyrkogatan or P_Lot_Left) U Empty_Spots) or ((Kyrkogatan or P_Lot_Right) U Empty_Spots) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 403,
    "status": "OK",
    "text": "eventually visiting regions y1, y2, and y3, while reaching y1 and y2 simultaneously. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (y1 and y2 and y3) and (not (y1 or y2) U (y1 and y2 ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 404,
    "status": "OK",
    "text": "the visit of several ROIs in an environment with 8 ROI, while the regions y5 and y6 are simultaneously reached, respectively, y4 and y7. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Fy1 and Fy3 and Fy5 and Fy6 and Fy7 and Fy8) and (not (y5 or y6) U (y5 and y6)) and (not (y4 or y7) U (y4 and y7))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 405,
    "status": "OK",
    "text": "at some future point, φ1 will inevitably lead to φ2 being true",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (f1 --> F f2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 406,
    "status": "OK",
    "text": "the formula is eventually true that if ψ is true, then φ will be accurate at some point in the future.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (y --> F f) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 407,
    "status": "OK",
    "text": "at some time in the future, if φ1 and ψ2 become true, then φ2 will necessarily be true later. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ((f1 and F y) --> F f2) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 408,
    "status": "OK",
    "text": "if ψ1 is accurate at a given time, then at a later time, ψ2 will become true. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ((y1 --> F y2) --> F f) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 409,
    "status": "OK",
    "text": "the robot to first get the key from drawer A before starting the car",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( keydrawerA and X (F car))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 410,
    "status": "OK",
    "text": "reachability navigation ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not Obstacles and fgi ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 411,
    "status": "OK",
    "text": "φc requires the quadruped robot to go to a room A to find the nurse to consult the patient’s condition and then go to room B or room C to find a doctor and get medicine. Before bringing the medicine to the nurse in room A, it needs to throw the box of medicine into a random trash can",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F nurseRoomA and G F (doctorRoomB or doctorRoomC) and G F can and G F nurseRoomA ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 412,
    "status": "OK",
    "text": "φc requires the quadruped robot first to find the water bottle and school bag and then hand them to the human, who might be in either area A or area B.  ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (water and X (F(bag and X( F human)))) or F (bag and X (F (water and X(F human))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 413,
    "status": "OK",
    "text": "the tank water level must always be greater than 0 and less than 100, and if the valve is opened (closed) it should remain open (closed) for at least three seconds",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (level > zero) and G (level < 100) and G ( (open and X close) --> (X X close and X X X close) ) and G ( (close and X open) --> (X X open and X X X open) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 414,
    "status": "OK",
    "text": "after an attack in state S, the system must transition to W or TW",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (Attack and S) --> X (W or TW)) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 415,
    "status": "OK",
    "text": "𝛼 is eventually executed. The action 𝛼 is called the inevitable action.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F a",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 416,
    "status": "OK",
    "text": "action LOG eventually happens",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F LOG",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 417,
    "status": "OK",
    "text": "Only one annotator, amongst the ones queried to annotate a given image, gets access to that image, and only once.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (rec_0==0 and rec_1 ==1 and rec_2_plus_rec_3==1) or (rec_0==2 and rec_1_plus_rec_2_plus_rec_3==0) or (rec_0==1 and rec_1==1 and rec_2_plus_rec_3==0) or (rec_0==1 and rec_1==0 and rec_2_plus_rec_3==1) or intermediate or img1_plus_img2==0 )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 418,
    "status": "OK",
    "text": "reach-avoid specification",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(safe) and F(goal)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 419,
    "status": "OK",
    "text": "in 2D unicycle under specification the task of simultaneously reaching a charge station while remaining safe and, if the system goes through a region with water, then it should first dry in a carpet before charging",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(safe) and G( water --> (( not charge U carpet) and F(charge)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 420,
    "status": "OK",
    "text": "if a response from the authorization server 𝑠 contains an access token 𝑡 and an id token 𝑖, a request using the token 𝑡 from client 𝑐 should not be sent until the id token 𝑖 is successfully verified. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (response_s_arg_access_token == t and arg_id_token == i) --> not (request_c_arg_access_token == t U verifyToken_i_ret == true))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 421,
    "status": "OK",
    "text": "if access token 𝑡 is received (as a response from the authorization server 𝑠) with an id token 𝑖 whose 𝑎𝑙𝑔 header value is ‘none’, a subsequent request (e.g., user info request) using the access token should not be sent",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (response_s_arg_access_token == t and arg_id_token == i and i_alg == none) --> not F request_c_arg_access_token == t )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 422,
    "status": "OK",
    "text": "When responding to the authorization code flow to perform authentication, the server returns an authorization code (OpenID spec. §3.1.2) that can be exchanged for an id token and (or) an access token. This flow prevents exposing any tokens directly to the user agent and other malicious client applications. However, the specification requires authenticating the user before sending the code to the client. Since the methods used by the server to authenticate the end user vary for different service providers, AuthLTL provides authUser predicate to model user authentication. In addition, 𝑔𝑒𝑛𝑐𝑜𝑑𝑒 is an OIDC API that returns the code generated by the server. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( (request_s_arg_response_type == code and session == u)  --> ((not response_c_arg_code == gencode_u) U (authUser_u_ret == true)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 423,
    "status": "OK",
    "text": "regions marked by letters A to E are those with our particular interests. Furthermore, regions marked by black color are dangerous regions the UGV should avoid.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F A_) and (F C) and (G not dangerous)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 424,
    "status": "OK",
    "text": "for the same system - the task consists of three parts: i) the finite task of visiting C, D, A, B in order; and ii) the infinite surveillance task of visiting C and D infinitely often; and iii) the safety task of avoiding dangerous regions.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not D U C) and (not A_ U D) and (not B U A_) and F B and G F C and G F D and G not dangerous",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 425,
    "status": "OK",
    "text": "the UGV needs to visit regions E, A and B sequentially for infinite number of times.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F E_ and G (A_ --> X ( (not A_ and not E_) U B)) and G (B --> X ((not A_ and not B) U E_)) and G (E_ --> X ((not B and not E_) U A_))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 426,
    "status": "OK",
    "text": "whenever the train is arriving the sensor1, eventually it will enter the critical section",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (T --> F C)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 427,
    "status": "OK",
    "text": "whenever the sensor1 signal is asserted the railway interlocking state machine should move immediately to the “train-in-CS” state and remain there until the sensor1 signal is de-asserted",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (T --> X (C U Q) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 428,
    "status": "OK",
    "text": "initial-state robustness specification",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(a3pi1 and a4pi2 ) --> G(a1pi1 and a1pi2 )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 429,
    "status": "OK",
    "text": " δ-approximate initial-state opacity specification",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "a1pi1 --> (a2pi2 and G (a3pi1 and a3pi2 ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 430,
    "status": "OK",
    "text": "the vehicles can never crash, that is that the middle vehicle’s position is never less than or equal to zero and that the tail vehicle’s position is never less than or equal to that of the middle vehicle",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G not (vpos <= 0) and G not (tpos <= vpos)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 431,
    "status": "OK",
    "text": "requires the robot to reach the goal Xgoal in H time steps ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (x_in_X_goal)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 432,
    "status": "OK",
    "text": "reach-avoid specification ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "fliveness and fsafety",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 433,
    "status": "OK",
    "text": "mobile robot that navigates a two-dimensional workspace. We partition the state space X ⊂ R2 into six abstract states X = {q1, . . . , q6} and discretize the controller space PK×b into two controller partitions P = {P1, P2}. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F (x_in_q6) and G not (x_in_q4) and F (x_in_q5) and G not (x_in_q3) and F (x_in_q5) and G not (x_in_q3)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 434,
    "status": "OK",
    "text": "violation indicates a collision",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G a",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 435,
    "status": "OK",
    "text": "reactivity property: rocess over one integer variable x that, when initialised at x = 0, chooses with 0.5 probability to either enumerate the positive numbers or the odd negative numbers / either x is even infinitely often or that x stays strictly negative from some time onwards",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F (x_is_even) or F G (x < 0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 436,
    "status": "OK",
    "text": "stabilize-while-avoid property: requires the system to avoid x < −1 until it stabilizes within (−1 ≤ x ≤ 1). ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(x >= minus_1) U G (minus_1 <= x and x <= 1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 437,
    "status": "OK",
    "text": "the temperature eventually persists within the interval (292, 298) around xset = 295.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G (not Hot and not Cold)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 438,
    "status": "OK",
    "text": "observation {Safe} associated with the temperature being under 310K",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (Safe) and (G F (Cold) --> G F (Hot))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 439,
    "status": "OK",
    "text": "reactivity specification",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F (x <= 0) --> G F (x >= 100)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 440,
    "status": "OK",
    "text": "the application should only generate sequences of Accept",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G Accept",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 441,
    "status": "OK",
    "text": "robot R1 that takes the raw materials from 𝐵3 to the production machine at 𝐴1. the robot R1 needs to visit 𝐴1 and 𝐵3 infinitely often",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F R1_in_A1 and G F R1_in_B3",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 442,
    "status": "OK",
    "text": "For delivering the erasers to the machine, it has another robot R2 that takes raw material from 𝐵3 and feeds the machines via a conveyor belt at 𝐶1 if R1 feeds the raw material at 𝐴1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F R1_in_A1 --> (G F R2_in_B3 and G F R2_in_C1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 443,
    "status": "OK",
    "text": "If R1 is suddenly required to also collect and deposit goods from 𝐴3",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F A3",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 444,
    "status": "OK",
    "text": "One of the safety specifications says no new movement order, denoted m, can occur while the robot is already moving. In other words, it means that “the event m should never occur while the system is in the functioning mode Moving”.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(G (Modemoving_high) and not (Modemoving_low and (F Modemoving_low))) --> ( not m U (Modemoving_low))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 445,
    "status": "OK",
    "text": "Never(m)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not m)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 446,
    "status": "OK",
    "text": "Global Response(A,B) ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (A_ --> F B)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 447,
    "status": "OK",
    "text": "the agent does not visit any fire states before collecting the watering can first",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not danger) U water_can",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 448,
    "status": "OK",
    "text": "Each request should eventually be followed by a grant and the two grants should never be assigned simultaneously.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (( r1 --> F g1 ) and ( r2 --> F g2 ) and not (g1 and g2 ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 449,
    "status": "OK",
    "text": "received requests must be followed by a grant within 10 time steps:",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (( r1 --> F g1 ) and ( r2 --> F g2 ) and not (g1 and g2 ))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 450,
    "status": "OK",
    "text": "either 𝑝 is always true or 𝑝 is true for a finite amount of time, after which 𝑞 is true forever",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( p or G q)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 451,
    "status": "OK",
    "text": "invariance of the total account balance. Specifically, the total balance of each account in the smart contract should remain constant throughout the entire transaction process. In other words, the combined balance of all accounts should not change during any transactions or operations.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (fa_Acc_plus_su_Acc_plus_t_Acc_plus_sca_Acc_plus_scb_Acc == invar0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 452,
    "status": "OK",
    "text": "a stream is non-negative at the current instant, and will continue to be non-negative in all subsequent time instants",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (w >= 0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 453,
    "status": "OK",
    "text": "variable 𝑣 is always equal to the term variable 𝑥. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (v == x) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 454,
    "status": "OK",
    "text": "The state predicate 𝑠 < 0 within 𝜑 should only apply to the first state of 𝑠.  after 𝑠 emits a value and becomes 𝑠′, 𝜑 no longer accurately describes 𝑠′, as the value it emits next is not negative.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(s < 0) and X G(s >= 0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 455,
    "status": "OK",
    "text": "collision never occurs:  the ego vehicle position 𝑥𝑓 never exceeds the leader’s position 𝑥ℓ ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (xf < xl )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 456,
    "status": "OK",
    "text": "pi is a constant variable, w is declared in terms of pi, and y is annotated with a refinement",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(pi == 3_14159) and (w == 2_times_pi) and (y == 4_0)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 457,
    "status": "OK",
    "text": "only accepts negative float inputs and the program ensures that the output is positive",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(x < zero) and (y == x_times_x) and (v == y)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 458,
    "status": "OK",
    "text": "numerical correctness",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G token_value_pc_false == empty",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 459,
    "status": "OK",
    "text": "memory access correctness",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "is_fireable_t --> token_value_pindex < L",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 460,
    "status": "OK",
    "text": "invoke finiteness",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F (token_value_pinit > empty)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 461,
    "status": "OK",
    "text": "If system senses train arrival, then it will send signal to the controller and controller in return will request for train distance than distance will be provide from system to controller",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F (inform_controller) --> ( X (send_signal) --> (X (X (X (signal_received))) --> (X (send_distance --> X (X (distance_sent))) ))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 462,
    "status": "OK",
    "text": "If somewhere circuit make request for close or opening the gate than somewhere in future gate will open or close and light will be green or red according to request.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F ((door_opened and green) or (closed_door and red)) --> X( F ( (light==green and door_open) or (light==red and door_close))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 463,
    "status": "OK",
    "text": "verify that the encoding of the wHappensBefore is such that event2 never happens before event1",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not G ( event2_happened and not event1_happened ) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 464,
    "status": "OK",
    "text": "contract eventually terminates.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ( computer_cntCnt_state == sTermination or computer_cnt_Cnt_state == unsTermination)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 465,
    "status": "OK",
    "text": "In case of late delivery, the store is penalized no more than once.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( computer_cnt_pLateComp_state == fulfillment --> G not ( computer_cnt_oPayLateD_state == inEffect ) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 466,
    "status": "OK",
    "text": "The computer is always paid after on−time delivery ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not (computer_cnt_oDel_state == fulfillment) U (computer_cnt_oPay_state == fulfillment or computer_cnt_oPayLateD_state == fulfillment)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 467,
    "status": "OK",
    "text": "This property essentially ensures that the delivery starts once the deposit for the computer is received.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ((computer_cntoPay_state == fulfillment) --> F (computer_cnt_oDel_state == inEffect) ) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 468,
    "status": "OK",
    "text": "It is possible to receive a computer and terminate the contract without payment. We aim to generate a witness here.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G(((computer_cnt_cnt_state == sTermination or computer_cnt_cnt_state == unsTermination) and computer_cnt_oDel_state == fulfillment) --> G(computer_cnt_oPay_state == fulfillment or computer_cnt_oPayLateD_state == fulfillment))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 469,
    "status": "OK",
    "text": "boundedness: The LTL formula represents the condition in which the token count in each of the places is never greater than the initial token count of the model. Here, the initial token count is 7 thus the LTL specification checks that the token count in each place does not always exceed 7.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not (( Choose > seven) or ( CPUidle > seven ) or (Diskidle > seven) or (IOwait > seven) or (Think > seven) or (UseCPU > seven) or (Usedisk > seven) or ( waitCPU > seven))) ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 470,
    "status": "OK",
    "text": "Deadlock: the LTL formula for checking the deadlock situation indicates that always in the system there is someplace whose token count is greater than 0 thus enabling its following transition to fire. This keeps the system alive as either of the transitions is enabled. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F ((Choose > zero) or (CPUidle > zero) or (Diskidle > zero) or ( IOwait > zero) or (Think > zero) or ( UseCPU > zero) or ( Usedisk > zero) or ( waitCPU > zero)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 471,
    "status": "OK",
    "text": "Mutual exclusive: Check that the system resource CPU and disk are used by only one process at a time. Mutual exclusivity is used to check whether the CPU is used by only one task at a given time. The mutual exclusive property for transitions GCPU and CPU is verified by verifying that the preconditions for enabling the transitions are not satisfied simultaneously. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( not (( CPUidle > zero) and ( UseCPU > zero)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 472,
    "status": "OK",
    "text": "The system buffer is not overloaded with the jobs: Assuming that the initial number of jobs is 5, we check that the number of jobs waiting in the buffer does not exceed 5.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( not (waitCPU > five))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 473,
    "status": "OK",
    "text": "Parallel process operations using a CPU and disk simultaneously are possible.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G  ( not ((UseCPU > zero) and (Usedisk > zero)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 474,
    "status": "OK",
    "text": "boundedness: The LTL formula represents the condition in which the token count in each of the places is never greater than the initial token count of the model. Here, for the 2-cell Kanban system, the initial token count is six, thus the LTL specification checks that the token count in each place does not always exceed six. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not (( Bulletinbrd1 > six) or ( Bulletinbrd2 > six) or ( Inbuff1 > six) or ( Inbuff2 > six) or ( Machine1 > six) or ( Machine1idle > six) or ( Machine2 > six) or ( Machine2idle > six) or ( Outbuff1 > six) or (Outbuff2 > six) or ( P12 > six) or ( P13 > six) or (P15 > six) or (P17 > six) or (P19 > six) or ( P2cmp > six) or ( P3 > six) or (P5 > six) or (P7 > six) or (P9 > six)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 475,
    "status": "OK",
    "text": "deadlock: The LTL formula for checking the deadlock situation indicates that always in the system there is some-place whose token count is greater than 0, thus enabling its following transition to fire. This keeps the system alive as either of the transitions is enabled.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (F ((Bulletinbrd1 > zero) or (Bulletinbrd2 > zero) or ( Inbuff1 > zero) or (Inbuff2 > zero) or ( Machine1 > zero) or ( Machine1idle > zero) or ( Machine2 > zero) or ( Machine2idle > zero) or ( Outbuff1 > zero) or ( Outbuff2 > zero) or (P12 > zero) or (P13 > zero) or ( P15 > zero) or ( P17 > zero) or (P19 > zero) or ( P2cmp > zero) or (P3 > zero) or (P5 > zero) or (P7 > zero) or ( P9 > zero)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 476,
    "status": "OK",
    "text": "The number of jobs in the system was always equal to the card count. ",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( not ( Inbuff1 > two))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 477,
    "status": "OK",
    "text": "A part is transferred into the input buffer of cell C i only when there is a part in the output buffer of cell Cfi-1g and the bulletin board of cell C i has a card.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not ( F ( (Outbuff1 > zero) and (Bulletinbrd2 > zero) ) and ( F (Inbuff2 > zero)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 478,
    "status": "OK",
    "text": "the robot should visit a target region ‘‘𝖦𝗈𝖺𝗅’’ while avoiding unsafe regions ‘‘𝖡𝖺𝖽’’ during its operations",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F Goal and G not Bad",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 479,
    "status": "OK",
    "text": "Passenger will get permission to enter and exit after scanning RFID number",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F ((scan_RFID --> passenger_enter_in_bus) and (scan_RFID --> passenger_leave)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 480,
    "status": "OK",
    "text": "If passenger balance is greater than fare amount then amount will be deducted and passenger will exit in somewhere future.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( F ( ((compute_fare < user_balance) --> X (deduct_amount)) --> G ( F (passenger_exit))))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 481,
    "status": "OK",
    "text": "both our observables ful and emp are true infinitely often",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F ful and G F emp",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 482,
    "status": "OK",
    "text": "the system does not eventually go into a state from where ¬ful holds indefinitely nor ¬emp holds indefinitely",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not ( F G not ful or F G not emp)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 483,
    "status": "OK",
    "text": "sig occurs infinitely often under the assumption that the reset event rst is received finitely many times",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F sig",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 484,
    "status": "OK",
    "text": "sig doesn’t remain triggered forever in 3)",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F (sig and X not sig)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 485,
    "status": "OK",
    "text": "The LCD Controller (LCD) performs a display initialisation setup, then awaits the lcd_enable signal to transition from ready to send for data transmission, and returns to ready after a fixed interval",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G lcd_enable --> G F ready",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 486,
    "status": "OK",
    "text": "Thermocouple (Tmcp.) transitions through stages, start, get_data and pause with suitable delay in between, processing SPI transactions and managing transitions based on bus activity",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F get_data",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 487,
    "status": "OK",
    "text": "The 7-Segment (7-Seg) model alternates between two displays, ensuring each is activated regularly unless reset",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> (G F disp == 0 and G F disp == 1)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 488,
    "status": "OK",
    "text": "It monitors rst and detects the ena signal to manage clock stretching",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G ( not rst and ena) --> G F stretch",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 489,
    "status": "OK",
    "text": "the low setting of pulse infinitely often",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G F not pulse",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 490,
    "status": "OK",
    "text": "The VGA Controller (VGA) manages a display interface using horizontal and vertical counters for pixel coordinates, ensuring smooth rendering by adjusting sync pulses and the display enable signal disp_ena",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F disp_ena",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 491,
    "status": "OK",
    "text": "The UART Transmitter (UARTt) toggles between wait for preparing data and transmit for sending data, based on tx_ena requests and clk signals",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F wait",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 492,
    "status": "OK",
    "text": "The Load-Store (LS) toggles between load and store with a delay implemented by counter which counts from 0 up to N when load then switch to store counting back down to 0, before switching back to load, sig signals a switch from load to store",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F sig",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 493,
    "status": "OK",
    "text": "ensuring single bit changes between consecutive counts",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G not rst --> G F sig",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 494,
    "status": "OK",
    "text": "ensure that the signal sig does not remain triggered indefinitely",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(F G not rst --> G F(sig and X not sig)) and (F G not rst --> (G F sig and G F not sig))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 495,
    "status": "OK",
    "text": "safe initialization",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F ((beaconState_GetGenesisTime == eth1_timestamp_plus_GENESIS_DELAY) and (beaconState_GetFork == fork) and (balances_GetCount > zero) and ( statevalidators_GetCount > zero) and (statevalidators_areActivated == true))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 496,
    "status": "OK",
    "text": "justification",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G ( ((justified_GetIndex_genesis == 0) and ( ((justified_GetIndex_old_current_justified_checkpoint == beaconState_get_previous_epoch_beaconState) or (justified_GetIndex_old_current_justified_checkpoint == beaconState_get_previous_epoch_beaconState_minus1)) and ((previousEpochTargetBalance_Get_times_3 >= totalActiveBalance_Get_times_2) or (currentEpochTargetBalance_Get_times_3 >= totalActiveBalance_Get_times_2)) ) ) --> ((justified_GetIndex_beaconState_GetCurrentJustifiedCheckpoint == beaconState_get_previous_epoch_beaconState) or (justified_GetIndex_beaconState_GetCurrentJustifiedCheckpoint == beaconState_get_current_epoch_beaconState)) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 497,
    "status": "OK",
    "text": "finalization",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "F G  ( ( (justified_GetCount >= k_plus_1) and (justified_Adjacent_k_plus1) ) --> (finalized_Contains_finalized_Get_k == true) )",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 498,
    "status": "OK",
    "text": "When User sends updateScript or getScript to iface without sending powerOff afterward, if SoC is in LCMS mode then User must receive a scriptResp message.\" can be translated into: “When ifaceHasScriptMessage without ifaceHasPowerOff, if ifaceIsInStatePOnLcmOn then user- HasScriptResp must be emitted.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G ( G ifaceIsInStatePOnLcmOn --> G (ifaceHasScriptMessage --> F (userHasScriptResp or ifaceHasPowerOff)))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 499,
    "status": "OK",
    "text": "liveness property: Writes (setScript and setConfig) on SecureStorage must correspond to updateScript(true) messages sent to the manager.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (managerHasValidUpdate --> F (memoryWrite or ifaceHasPowerOff))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 500,
    "status": "OK",
    "text": "safety property: Writes (setScript and setConfig) on SecureStorage must correspond to updateScript(true) messages sent to the manager.",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "not memoryWrite U managerHasValidUpdate",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 501,
    "status": "OK",
    "text": "When SecureStorage receives a setScript message, it must always be followed by setConfig before the next setIPs message is sent to SoCIPs by ipCtrlr",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (( F IPsHasSetIP) --> ((sstrHasSetScript --> ( not IPsHasSetIP U (sstrHasSetConfig and not IPsHasSetIP))) U IPsHasSetIP))",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 502,
    "status": "OK",
    "text": "onsider a robot that needs to enter a specific room p1 and to stay charged it should return to a base station p2 in the hallway",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "(not p2 and safe) U p1 ",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 503,
    "status": "OK",
    "text": "and its safe return, where safe is defined based on avoiding any closed doors",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "( ((not door) or (not closed)) U p2)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  },
  {
    "id": 504,
    "status": "OK",
    "text": "for every step between 0 and t, the amount of time during which UP holds is at least 90% of the elapsed time",
    "logics": [
      {
        "type": "INV",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "LTL",
        "f_latex": "",
        "f_code": "G (dur_UP > zero_0_times_Time)",
        "translation": "self",
        "reasoning": ""
      },
      {
        "type": "MTLb",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "STL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "MITL",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      },
      {
        "type": "CTLS",
        "f_latex": "",
        "f_code": "",
        "translation": "no",
        "reasoning": ""
      }
    ]
  }
]